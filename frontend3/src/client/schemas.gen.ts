// This file is auto-generated by @hey-api/openapi-ts

export const APIKeyCreateSchema = {
    properties: {
        title: {
            type: 'string',
            title: 'Title'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        project_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Project Id'
        },
        expires_at: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Expires At'
        }
    },
    type: 'object',
    required: ['title'],
    title: 'APIKeyCreate',
    description: 'API key creation schema.'
} as const;

export const APIKeyDetailSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        public_key: {
            type: 'string',
            title: 'Public Key'
        },
        owner_id: {
            type: 'string',
            format: 'uuid',
            title: 'Owner Id'
        },
        project_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Project Id'
        },
        title: {
            type: 'string',
            title: 'Title'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        status: {
            type: 'string',
            title: 'Status'
        },
        expires_at: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Expires At'
        },
        last_used_at: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Last Used At'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['id', 'public_key', 'owner_id', 'project_id', 'title', 'description', 'status', 'expires_at', 'last_used_at', 'created_at', 'updated_at'],
    title: 'APIKeyDetail',
    description: 'Detailed API key schema with full information.'
} as const;

export const APIKeyGenerateResponseSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        public_key: {
            type: 'string',
            title: 'Public Key'
        },
        secret_key: {
            type: 'string',
            title: 'Secret Key'
        },
        title: {
            type: 'string',
            title: 'Title'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        project_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Project Id'
        },
        expires_at: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Expires At'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        }
    },
    type: 'object',
    required: ['id', 'public_key', 'secret_key', 'title', 'description', 'project_id', 'expires_at', 'created_at'],
    title: 'APIKeyGenerateResponse',
    description: 'Response schema for API key generation.'
} as const;

export const APIKeyPublicSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        public_key: {
            type: 'string',
            title: 'Public Key'
        },
        owner_id: {
            type: 'string',
            format: 'uuid',
            title: 'Owner Id'
        },
        project_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Project Id'
        },
        title: {
            type: 'string',
            title: 'Title'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        status: {
            type: 'string',
            title: 'Status'
        },
        expires_at: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Expires At'
        },
        last_used_at: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Last Used At'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['id', 'public_key', 'owner_id', 'project_id', 'title', 'description', 'status', 'expires_at', 'last_used_at', 'created_at', 'updated_at'],
    title: 'APIKeyPublic',
    description: 'Public API key schema for API responses.'
} as const;

export const APIKeyUpdateSchema = {
    properties: {
        title: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Title'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        project_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Project Id'
        },
        status: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Status'
        },
        expires_at: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Expires At'
        }
    },
    type: 'object',
    title: 'APIKeyUpdate',
    description: 'API key update schema.'
} as const;

export const AddCreditsRequestSchema = {
    properties: {
        amount: {
            type: 'number',
            title: 'Amount'
        },
        description: {
            type: 'string',
            title: 'Description'
        }
    },
    type: 'object',
    required: ['amount', 'description'],
    title: 'AddCreditsRequest',
    description: 'Request to add credits to an account.'
} as const;

export const AgentCreateSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        system_prompt: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'System Prompt'
        },
        model: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Model'
        },
        is_default: {
            type: 'boolean',
            title: 'Is Default',
            default: false
        },
        tags: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Tags'
        },
        icon_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Icon Name',
            default: 'bot'
        },
        icon_color: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Icon Color',
            default: '#000000'
        },
        icon_background: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Icon Background',
            default: '#F3F4F6'
        }
    },
    type: 'object',
    required: ['name'],
    title: 'AgentCreate',
    description: 'Agent creation schema.'
} as const;

export const AgentDetailSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        owner_id: {
            type: 'string',
            format: 'uuid',
            title: 'Owner Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        system_prompt: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'System Prompt'
        },
        model: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Model'
        },
        is_default: {
            type: 'boolean',
            title: 'Is Default'
        },
        is_public: {
            type: 'boolean',
            title: 'Is Public'
        },
        tags: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Tags'
        },
        icon_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Icon Name'
        },
        icon_color: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Icon Color'
        },
        icon_background: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Icon Background'
        },
        configured_mcps: {
            items: {
                additionalProperties: {
                    type: 'string'
                },
                type: 'object'
            },
            type: 'array',
            title: 'Configured Mcps'
        },
        custom_mcps: {
            items: {
                additionalProperties: {
                    type: 'string'
                },
                type: 'object'
            },
            type: 'array',
            title: 'Custom Mcps'
        },
        agentpress_tools: {
            additionalProperties: {
                type: 'string'
            },
            type: 'object',
            title: 'Agentpress Tools'
        },
        version_count: {
            type: 'integer',
            title: 'Version Count'
        },
        current_version_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Current Version Id'
        },
        my_metadata: {
            anyOf: [
                {
                    additionalProperties: {
                        type: 'string'
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'My Metadata'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['id', 'owner_id', 'name', 'description', 'system_prompt', 'model', 'is_default', 'is_public', 'tags', 'icon_name', 'icon_color', 'icon_background', 'configured_mcps', 'custom_mcps', 'agentpress_tools', 'version_count', 'current_version_id', 'my_metadata', 'created_at', 'updated_at'],
    title: 'AgentDetail',
    description: 'Detailed agent schema with full configuration.'
} as const;

export const AgentIconGenerationRequestSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        }
    },
    type: 'object',
    required: ['name'],
    title: 'AgentIconGenerationRequest',
    description: 'Request schema for agent icon generation.'
} as const;

export const AgentIconGenerationResponseSchema = {
    properties: {
        icon_name: {
            type: 'string',
            title: 'Icon Name'
        },
        icon_color: {
            type: 'string',
            title: 'Icon Color'
        },
        icon_background: {
            type: 'string',
            title: 'Icon Background'
        }
    },
    type: 'object',
    required: ['icon_name', 'icon_color', 'icon_background'],
    title: 'AgentIconGenerationResponse',
    description: 'Response schema for agent icon generation.'
} as const;

export const AgentKnowledgeAssignmentRequestSchema = {
    properties: {
        entry_ids: {
            items: {
                type: 'string',
                format: 'uuid'
            },
            type: 'array',
            title: 'Entry Ids'
        }
    },
    type: 'object',
    required: ['entry_ids'],
    title: 'AgentKnowledgeAssignmentRequest',
    description: 'Request to assign knowledge base entries to an agent.'
} as const;

export const AgentPublicSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        owner_id: {
            type: 'string',
            format: 'uuid',
            title: 'Owner Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        is_default: {
            type: 'boolean',
            title: 'Is Default'
        },
        is_public: {
            type: 'boolean',
            title: 'Is Public'
        },
        tags: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Tags'
        },
        icon_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Icon Name'
        },
        icon_color: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Icon Color'
        },
        icon_background: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Icon Background'
        },
        version_count: {
            type: 'integer',
            title: 'Version Count'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['id', 'owner_id', 'name', 'description', 'is_default', 'is_public', 'tags', 'icon_name', 'icon_color', 'icon_background', 'version_count', 'created_at', 'updated_at'],
    title: 'AgentPublic',
    description: 'Public agent schema for API responses.'
} as const;

export const AgentRetryResponseSchema = {
    properties: {
        message: {
            type: 'string',
            title: 'Message',
            default: 'Agent run retry initiated successfully'
        }
    },
    type: 'object',
    title: 'AgentRetryResponse',
    description: 'Response schema for retrying an agent run.'
} as const;

export const AgentRunPublicSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        thread_id: {
            type: 'string',
            format: 'uuid',
            title: 'Thread Id'
        },
        agent_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Agent Id'
        },
        agent_version_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Agent Version Id'
        },
        status: {
            type: 'string',
            title: 'Status'
        },
        started_at: {
            type: 'string',
            format: 'date-time',
            title: 'Started At'
        },
        completed_at: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Completed At'
        },
        error_message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Error Message'
        },
        my_metadata: {
            anyOf: [
                {
                    additionalProperties: true,
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'My Metadata'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['id', 'thread_id', 'agent_id', 'agent_version_id', 'status', 'started_at', 'completed_at', 'error_message', 'my_metadata', 'created_at', 'updated_at'],
    title: 'AgentRunPublic',
    description: 'Public agent run schema for API responses.'
} as const;

export const AgentRunStatusResponseSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        thread_id: {
            type: 'string',
            format: 'uuid',
            title: 'Thread Id'
        },
        agent_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Agent Id'
        },
        status: {
            type: 'string',
            title: 'Status'
        },
        started_at: {
            type: 'string',
            format: 'date-time',
            title: 'Started At'
        },
        completed_at: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Completed At'
        },
        error_message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Error Message'
        },
        my_metadata: {
            anyOf: [
                {
                    additionalProperties: true,
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'My Metadata'
        }
    },
    type: 'object',
    required: ['id', 'thread_id', 'agent_id', 'status', 'started_at', 'completed_at', 'error_message', 'my_metadata'],
    title: 'AgentRunStatusResponse',
    description: 'Response schema for agent run status.'
} as const;

export const AgentStartRequestSchema = {
    properties: {
        agent_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Agent Id'
        },
        model_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Model Name'
        },
        my_metadata: {
            anyOf: [
                {
                    additionalProperties: true,
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'My Metadata'
        }
    },
    type: 'object',
    title: 'AgentStartRequest',
    description: 'Request schema for starting an agent.'
} as const;

export const AgentStartResponseSchema = {
    properties: {
        agent_run_id: {
            type: 'string',
            format: 'uuid',
            title: 'Agent Run Id'
        },
        thread_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Thread Id'
        },
        project_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Project Id'
        },
        model_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Model Name'
        },
        agent_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Agent Name'
        },
        status: {
            type: 'string',
            title: 'Status',
            default: 'running'
        }
    },
    type: 'object',
    required: ['agent_run_id'],
    title: 'AgentStartResponse',
    description: 'Response schema for starting an agent.'
} as const;

export const AgentStopResponseSchema = {
    properties: {
        message: {
            type: 'string',
            title: 'Message',
            default: 'Agent run stopped successfully'
        }
    },
    type: 'object',
    title: 'AgentStopResponse',
    description: 'Response schema for stopping an agent run.'
} as const;

export const AgentUpdateSchema = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        system_prompt: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'System Prompt'
        },
        model: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Model'
        },
        is_default: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Default'
        },
        is_public: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Public'
        },
        tags: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Tags'
        },
        icon_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Icon Name'
        },
        icon_color: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Icon Color'
        },
        icon_background: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Icon Background'
        }
    },
    type: 'object',
    title: 'AgentUpdate',
    description: 'Agent update schema.'
} as const;

export const AvailableModelsResponseSchema = {
    properties: {
        models: {
            items: {
                '$ref': '#/components/schemas/ModelInfo'
            },
            type: 'array',
            title: 'Models'
        },
        total: {
            type: 'integer',
            title: 'Total'
        }
    },
    type: 'object',
    required: ['models', 'total'],
    title: 'AvailableModelsResponse',
    description: 'Available models response schema.'
} as const;

export const Body_initiate_agent_sessionSchema = {
    properties: {
        prompt: {
            type: 'string',
            title: 'Prompt'
        },
        model_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Model Name'
        },
        agent_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Agent Id'
        },
        files: {
            items: {
                type: 'string',
                format: 'binary'
            },
            type: 'array',
            title: 'Files',
            default: []
        }
    },
    type: 'object',
    required: ['prompt'],
    title: 'Body_initiate_agent_session'
} as const;

export const Body_login_access_tokenSchema = {
    properties: {
        grant_type: {
            anyOf: [
                {
                    type: 'string',
                    pattern: 'password'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Grant Type'
        },
        username: {
            type: 'string',
            title: 'Username'
        },
        password: {
            type: 'string',
            title: 'Password'
        },
        scope: {
            type: 'string',
            title: 'Scope',
            default: ''
        },
        client_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Id'
        },
        client_secret: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Secret'
        }
    },
    type: 'object',
    required: ['username', 'password'],
    title: 'Body_login_access_token'
} as const;

export const Body_upload_file_to_folderSchema = {
    properties: {
        file: {
            type: 'string',
            format: 'binary',
            title: 'File'
        }
    },
    type: 'object',
    required: ['file'],
    title: 'Body_upload_file_to_folder'
} as const;

export const CreditAccountSummarySchema = {
    properties: {
        balance: {
            type: 'number',
            title: 'Balance'
        },
        lifetime_granted: {
            type: 'number',
            title: 'Lifetime Granted'
        },
        lifetime_used: {
            type: 'number',
            title: 'Lifetime Used'
        },
        created_at: {
            type: 'string',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['balance', 'lifetime_granted', 'lifetime_used', 'created_at', 'updated_at'],
    title: 'CreditAccountSummary',
    description: 'Credit account summary schema.'
} as const;

export const CreditBalanceResponseSchema = {
    properties: {
        balance: {
            type: 'number',
            title: 'Balance'
        },
        lifetime_granted: {
            type: 'number',
            title: 'Lifetime Granted'
        },
        lifetime_used: {
            type: 'number',
            title: 'Lifetime Used'
        }
    },
    type: 'object',
    required: ['balance', 'lifetime_granted', 'lifetime_used'],
    title: 'CreditBalanceResponse',
    description: 'Credit balance response schema.'
} as const;

export const CreditTransactionPublicSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        user_id: {
            type: 'string',
            format: 'uuid',
            title: 'User Id'
        },
        amount: {
            type: 'number',
            title: 'Amount'
        },
        balance_after: {
            type: 'number',
            title: 'Balance After'
        },
        transaction_type: {
            type: 'string',
            title: 'Transaction Type'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        reference_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Reference Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        }
    },
    type: 'object',
    required: ['id', 'user_id', 'amount', 'balance_after', 'transaction_type', 'description', 'reference_id', 'created_at'],
    title: 'CreditTransactionPublic',
    description: 'Public credit transaction schema.'
} as const;

export const CreditTransactionsResponseSchema = {
    properties: {
        transactions: {
            items: {
                '$ref': '#/components/schemas/CreditTransactionPublic'
            },
            type: 'array',
            title: 'Transactions'
        },
        total: {
            type: 'integer',
            title: 'Total'
        },
        limit: {
            type: 'integer',
            title: 'Limit'
        },
        offset: {
            type: 'integer',
            title: 'Offset'
        }
    },
    type: 'object',
    required: ['transactions', 'total', 'limit', 'offset'],
    title: 'CreditTransactionsResponse',
    description: 'Credit transactions list response.'
} as const;

export const FileMoveRequestSchema = {
    properties: {
        target_folder_id: {
            type: 'string',
            format: 'uuid',
            title: 'Target Folder Id'
        }
    },
    type: 'object',
    required: ['target_folder_id'],
    title: 'FileMoveRequest',
    description: 'File move request schema.'
} as const;

export const FileUploadResponseSchema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        entry_id: {
            type: 'string',
            format: 'uuid',
            title: 'Entry Id'
        },
        filename: {
            type: 'string',
            title: 'Filename'
        },
        summary: {
            type: 'string',
            title: 'Summary'
        },
        file_size: {
            type: 'integer',
            title: 'File Size'
        },
        filename_changed: {
            type: 'boolean',
            title: 'Filename Changed',
            default: false
        },
        original_filename: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Original Filename'
        }
    },
    type: 'object',
    required: ['success', 'entry_id', 'filename', 'summary', 'file_size'],
    title: 'FileUploadResponse',
    description: 'File upload response schema.'
} as const;

export const HTTPValidationErrorSchema = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const InitiateAgentResponseSchema = {
    properties: {
        thread_id: {
            type: 'string',
            format: 'uuid',
            title: 'Thread Id'
        },
        agent_run_id: {
            type: 'string',
            format: 'uuid',
            title: 'Agent Run Id'
        },
        project_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Project Id'
        },
        model_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Model Name'
        },
        agent_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Agent Name'
        },
        message: {
            type: 'string',
            title: 'Message',
            default: 'Agent session initiated successfully'
        }
    },
    type: 'object',
    required: ['thread_id', 'agent_run_id'],
    title: 'InitiateAgentResponse',
    description: 'Response schema for initiating an agent session.'
} as const;

export const KnowledgeBaseEntryPublicSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        folder_id: {
            type: 'string',
            format: 'uuid',
            title: 'Folder Id'
        },
        owner_id: {
            type: 'string',
            format: 'uuid',
            title: 'Owner Id'
        },
        filename: {
            type: 'string',
            title: 'Filename'
        },
        file_size: {
            type: 'integer',
            title: 'File Size'
        },
        mime_type: {
            type: 'string',
            title: 'Mime Type'
        },
        summary: {
            type: 'string',
            title: 'Summary'
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['id', 'folder_id', 'owner_id', 'filename', 'file_size', 'mime_type', 'summary', 'is_active', 'created_at', 'updated_at'],
    title: 'KnowledgeBaseEntryPublic',
    description: 'Public knowledge base entry schema for API responses.'
} as const;

export const KnowledgeBaseEntryUpdateSchema = {
    properties: {
        summary: {
            type: 'string',
            title: 'Summary'
        }
    },
    type: 'object',
    required: ['summary'],
    title: 'KnowledgeBaseEntryUpdate',
    description: 'Knowledge base entry update schema.'
} as const;

export const KnowledgeBaseFolderCreateSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        }
    },
    type: 'object',
    required: ['name'],
    title: 'KnowledgeBaseFolderCreate',
    description: 'Knowledge base folder creation schema.'
} as const;

export const KnowledgeBaseFolderPublicSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        owner_id: {
            type: 'string',
            format: 'uuid',
            title: 'Owner Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        entry_count: {
            type: 'integer',
            title: 'Entry Count',
            default: 0
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['id', 'owner_id', 'name', 'description', 'created_at', 'updated_at'],
    title: 'KnowledgeBaseFolderPublic',
    description: 'Public knowledge base folder schema for API responses.'
} as const;

export const KnowledgeBaseFolderUpdateSchema = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        }
    },
    type: 'object',
    title: 'KnowledgeBaseFolderUpdate',
    description: 'Knowledge base folder update schema.'
} as const;

export const KnowledgeBaseStatsSchema = {
    properties: {
        total_folders: {
            type: 'integer',
            title: 'Total Folders'
        },
        total_entries: {
            type: 'integer',
            title: 'Total Entries'
        },
        total_size_bytes: {
            type: 'integer',
            title: 'Total Size Bytes'
        },
        total_size_mb: {
            type: 'number',
            title: 'Total Size Mb'
        },
        active_entries: {
            type: 'integer',
            title: 'Active Entries'
        }
    },
    type: 'object',
    required: ['total_folders', 'total_entries', 'total_size_bytes', 'total_size_mb', 'active_entries'],
    title: 'KnowledgeBaseStats',
    description: 'Knowledge base statistics schema.'
} as const;

export const LoginRequestSchema = {
    properties: {
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        },
        password: {
            type: 'string',
            title: 'Password'
        }
    },
    type: 'object',
    required: ['email', 'password'],
    title: 'LoginRequest',
    description: 'Login request schema.'
} as const;

export const LoginResponseSchema = {
    properties: {
        access_token: {
            type: 'string',
            title: 'Access Token'
        },
        token_type: {
            type: 'string',
            title: 'Token Type',
            default: 'bearer'
        }
    },
    type: 'object',
    required: ['access_token'],
    title: 'LoginResponse',
    description: 'Login response schema.'
} as const;

export const MessageSchema = {
    properties: {
        message: {
            type: 'string',
            title: 'Message'
        }
    },
    type: 'object',
    required: ['message'],
    title: 'Message',
    description: 'Generic message response.'
} as const;

export const ModelInfoSchema = {
    properties: {
        id: {
            type: 'string',
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        provider: {
            type: 'string',
            title: 'Provider'
        },
        input_cost_per_million: {
            type: 'number',
            title: 'Input Cost Per Million'
        },
        output_cost_per_million: {
            type: 'number',
            title: 'Output Cost Per Million'
        },
        context_window: {
            type: 'integer',
            title: 'Context Window'
        },
        supports_vision: {
            type: 'boolean',
            title: 'Supports Vision',
            default: false
        },
        supports_function_calling: {
            type: 'boolean',
            title: 'Supports Function Calling',
            default: true
        }
    },
    type: 'object',
    required: ['id', 'name', 'provider', 'input_cost_per_million', 'output_cost_per_million', 'context_window'],
    title: 'ModelInfo',
    description: 'AI model information schema.'
} as const;

export const PaginatedResponse_APIKeyPublic_Schema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/APIKeyPublic'
            },
            type: 'array',
            title: 'Data'
        },
        pagination: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/PaginationMeta'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['data'],
    title: 'PaginatedResponse[APIKeyPublic]'
} as const;

export const PaginatedResponse_AgentPublic_Schema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/AgentPublic'
            },
            type: 'array',
            title: 'Data'
        },
        pagination: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/PaginationMeta'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['data'],
    title: 'PaginatedResponse[AgentPublic]'
} as const;

export const PaginatedResponse_AgentRunPublic_Schema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/AgentRunPublic'
            },
            type: 'array',
            title: 'Data'
        },
        pagination: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/PaginationMeta'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['data'],
    title: 'PaginatedResponse[AgentRunPublic]'
} as const;

export const PaginatedResponse_ProjectPublic_Schema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/ProjectPublic'
            },
            type: 'array',
            title: 'Data'
        },
        pagination: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/PaginationMeta'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['data'],
    title: 'PaginatedResponse[ProjectPublic]'
} as const;

export const PaginatedResponse_ThreadMessagePublic_Schema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/ThreadMessagePublic'
            },
            type: 'array',
            title: 'Data'
        },
        pagination: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/PaginationMeta'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['data'],
    title: 'PaginatedResponse[ThreadMessagePublic]'
} as const;

export const PaginatedResponse_ThreadPublic_Schema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/ThreadPublic'
            },
            type: 'array',
            title: 'Data'
        },
        pagination: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/PaginationMeta'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['data'],
    title: 'PaginatedResponse[ThreadPublic]'
} as const;

export const PaginatedResponse_Thread_Schema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/Thread'
            },
            type: 'array',
            title: 'Data'
        },
        pagination: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/PaginationMeta'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['data'],
    title: 'PaginatedResponse[Thread]'
} as const;

export const PaginationMetaSchema = {
    properties: {
        page: {
            type: 'integer',
            title: 'Page'
        },
        limit: {
            type: 'integer',
            title: 'Limit'
        },
        total: {
            type: 'integer',
            title: 'Total'
        },
        pages: {
            type: 'integer',
            title: 'Pages'
        },
        has_next: {
            type: 'boolean',
            title: 'Has Next'
        },
        has_prev: {
            type: 'boolean',
            title: 'Has Prev'
        }
    },
    type: 'object',
    required: ['page', 'limit', 'total', 'pages', 'has_next', 'has_prev'],
    title: 'PaginationMeta',
    description: 'Pagination metadata.'
} as const;

export const ProjectCreateSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        is_public: {
            type: 'boolean',
            title: 'Is Public',
            default: false
        }
    },
    type: 'object',
    required: ['name'],
    title: 'ProjectCreate',
    description: 'Project creation schema.'
} as const;

export const ProjectPublicSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        owner_id: {
            type: 'string',
            format: 'uuid',
            title: 'Owner Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        is_public: {
            type: 'boolean',
            title: 'Is Public'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['id', 'owner_id', 'name', 'description', 'is_public', 'created_at', 'updated_at'],
    title: 'ProjectPublic',
    description: 'Public project response schema.'
} as const;

export const ProjectUpdateSchema = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        is_public: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Public'
        }
    },
    type: 'object',
    title: 'ProjectUpdate',
    description: 'Project update schema.'
} as const;

export const RegisterRequestSchema = {
    properties: {
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        },
        password: {
            type: 'string',
            title: 'Password'
        },
        full_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        }
    },
    type: 'object',
    required: ['email', 'password'],
    title: 'RegisterRequest',
    description: 'Register request schema.'
} as const;

export const RegisterResponseSchema = {
    properties: {
        id: {
            type: 'string',
            title: 'Id'
        },
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        },
        full_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        }
    },
    type: 'object',
    required: ['id', 'email'],
    title: 'RegisterResponse',
    description: 'Register response schema.'
} as const;

export const ThreadSchema = {
    properties: {
        title: {
            type: 'string',
            maxLength: 255,
            minLength: 1,
            title: 'Title'
        },
        description: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 1000
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        target_type: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 100
                },
                {
                    type: 'null'
                }
            ],
            title: 'Target Type'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        owner_id: {
            type: 'string',
            format: 'uuid',
            title: 'Owner Id'
        },
        project_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Project Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['title', 'owner_id'],
    title: 'Thread',
    description: 'Thread database model.'
} as const;

export const ThreadCreateSchema = {
    properties: {
        title: {
            type: 'string',
            title: 'Title'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        target_type: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Target Type'
        }
    },
    type: 'object',
    required: ['title'],
    title: 'ThreadCreate',
    description: 'Thread creation schema.'
} as const;

export const ThreadDetailSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        title: {
            type: 'string',
            title: 'Title'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        target_type: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Target Type'
        },
        owner_id: {
            type: 'string',
            format: 'uuid',
            title: 'Owner Id'
        },
        project_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Project Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['id', 'title', 'description', 'target_type', 'owner_id', 'project_id', 'created_at', 'updated_at'],
    title: 'ThreadDetail',
    description: 'Detailed thread schema with full information.'
} as const;

export const ThreadMessageCreateSchema = {
    properties: {
        content: {
            type: 'string',
            title: 'Content'
        },
        role: {
            type: 'string',
            title: 'Role',
            default: 'user'
        }
    },
    type: 'object',
    required: ['content'],
    title: 'ThreadMessageCreate',
    description: 'Thread message creation schema.'
} as const;

export const ThreadMessagePublicSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        thread_id: {
            type: 'string',
            format: 'uuid',
            title: 'Thread Id'
        },
        content: {
            type: 'string',
            title: 'Content'
        },
        role: {
            type: 'string',
            title: 'Role'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['id', 'thread_id', 'content', 'role', 'created_at', 'updated_at'],
    title: 'ThreadMessagePublic',
    description: 'Public thread message schema for API responses.'
} as const;

export const ThreadMessageUpdateSchema = {
    properties: {
        content: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Content'
        }
    },
    type: 'object',
    title: 'ThreadMessageUpdate',
    description: 'Thread message update schema.'
} as const;

export const ThreadPublicSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        title: {
            type: 'string',
            title: 'Title'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        target_type: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Target Type'
        },
        owner_id: {
            type: 'string',
            format: 'uuid',
            title: 'Owner Id'
        },
        project_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Project Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['id', 'title', 'description', 'target_type', 'owner_id', 'project_id', 'created_at', 'updated_at'],
    title: 'ThreadPublic',
    description: 'Public thread schema for API responses.'
} as const;

export const ThreadUpdateSchema = {
    properties: {
        title: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Title'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        target_type: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Target Type'
        }
    },
    type: 'object',
    title: 'ThreadUpdate',
    description: 'Thread update schema.'
} as const;

export const UpdatePasswordSchema = {
    properties: {
        current_password: {
            type: 'string',
            maxLength: 40,
            minLength: 8,
            title: 'Current Password'
        },
        new_password: {
            type: 'string',
            maxLength: 40,
            minLength: 8,
            title: 'New Password'
        }
    },
    type: 'object',
    required: ['current_password', 'new_password'],
    title: 'UpdatePassword',
    description: 'Password update schema.'
} as const;

export const UserCreateSchema = {
    properties: {
        email: {
            type: 'string',
            maxLength: 255,
            format: 'email',
            title: 'Email'
        },
        password: {
            type: 'string',
            maxLength: 40,
            minLength: 8,
            title: 'Password'
        },
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            default: true
        },
        is_superuser: {
            type: 'boolean',
            title: 'Is Superuser',
            default: false
        }
    },
    type: 'object',
    required: ['email', 'password'],
    title: 'UserCreate',
    description: 'User creation schema (admin).'
} as const;

export const UserPublicSchema = {
    properties: {
        email: {
            type: 'string',
            maxLength: 255,
            format: 'email',
            title: 'Email'
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            default: true
        },
        is_superuser: {
            type: 'boolean',
            title: 'Is Superuser',
            default: false
        },
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['email', 'id', 'created_at', 'updated_at'],
    title: 'UserPublic',
    description: 'Public user model.'
} as const;

export const UserUpdateSchema = {
    properties: {
        email: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255,
                    format: 'email'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        },
        password: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 40,
                    minLength: 8
                },
                {
                    type: 'null'
                }
            ],
            title: 'Password'
        },
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        },
        is_active: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Active'
        },
        is_superuser: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Superuser'
        }
    },
    type: 'object',
    title: 'UserUpdate',
    description: 'User update schema (admin).'
} as const;

export const UserUpdateMeSchema = {
    properties: {
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        },
        email: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255,
                    format: 'email'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        }
    },
    type: 'object',
    title: 'UserUpdateMe',
    description: 'User self-update schema.'
} as const;

export const UsersPublicSchema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/UserPublic'
            },
            type: 'array',
            title: 'Data'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'UsersPublic',
    description: 'Public users list model.'
} as const;

export const ValidationErrorSchema = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;
