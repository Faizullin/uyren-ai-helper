// This file is auto-generated by @hey-api/openapi-ts

export const AgentCreateSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        system_prompt: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'System Prompt'
        },
        model: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Model'
        },
        is_default: {
            type: 'boolean',
            title: 'Is Default',
            default: false
        },
        tags: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Tags'
        },
        icon_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Icon Name'
        },
        icon_color: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Icon Color'
        },
        icon_background: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Icon Background'
        }
    },
    type: 'object',
    required: ['name'],
    title: 'AgentCreate',
    description: 'Agent creation schema.'
} as const;

export const AgentStartRequestSchema = {
    properties: {
        agent_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Agent Id'
        },
        model_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Model Name'
        }
    },
    type: 'object',
    title: 'AgentStartRequest',
    description: 'Agent start request schema.'
} as const;

export const AgentStartResponseSchema = {
    properties: {
        agent_run_id: {
            type: 'string',
            format: 'uuid',
            title: 'Agent Run Id'
        },
        status: {
            type: 'string',
            title: 'Status',
            default: 'running'
        }
    },
    type: 'object',
    required: ['agent_run_id'],
    title: 'AgentStartResponse',
    description: 'Agent start response schema.'
} as const;

export const AgentUpdateSchema = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        system_prompt: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'System Prompt'
        },
        model: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Model'
        },
        is_default: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Default'
        },
        is_public: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Public'
        },
        tags: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Tags'
        },
        icon_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Icon Name'
        },
        icon_color: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Icon Color'
        },
        icon_background: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Icon Background'
        }
    },
    type: 'object',
    title: 'AgentUpdate',
    description: 'Agent update schema.'
} as const;

export const Body_create_assignmentSchema = {
    properties: {
        title: {
            type: 'string',
            title: 'Title'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        thirdparty_api_url: {
            type: 'string',
            title: 'Thirdparty Api Url'
        },
        thirdparty_assignment_id: {
            type: 'string',
            title: 'Thirdparty Assignment Id'
        },
        thirdparty_api_key: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Thirdparty Api Key'
        },
        auto_grade: {
            type: 'boolean',
            title: 'Auto Grade',
            default: true
        },
        require_manual_review: {
            type: 'boolean',
            title: 'Require Manual Review',
            default: false
        },
        use_rag: {
            type: 'boolean',
            title: 'Use Rag',
            default: false
        },
        grading_model: {
            type: 'string',
            title: 'Grading Model',
            default: 'gpt-5-mini'
        },
        teacher_instructions: {
            type: 'string',
            title: 'Teacher Instructions',
            default: ''
        },
        rubric: {
            anyOf: [
                {
                    additionalProperties: true,
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Rubric'
        },
        max_points: {
            type: 'integer',
            title: 'Max Points',
            default: 100
        }
    },
    type: 'object',
    required: ['title', 'thirdparty_api_url', 'thirdparty_assignment_id'],
    title: 'Body_create_assignment'
} as const;

export const Body_initiate_agent_sessionSchema = {
    properties: {
        prompt: {
            type: 'string',
            title: 'Prompt'
        },
        model_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Model Name'
        },
        agent_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Agent Id'
        },
        files: {
            items: {
                type: 'string',
                format: 'binary'
            },
            type: 'array',
            title: 'Files',
            default: []
        }
    },
    type: 'object',
    required: ['prompt'],
    title: 'Body_initiate_agent_session'
} as const;

export const Body_review_gradeSchema = {
    properties: {
        approved: {
            type: 'boolean',
            title: 'Approved'
        },
        adjusted_grade: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Adjusted Grade'
        }
    },
    type: 'object',
    required: ['approved'],
    title: 'Body_review_grade'
} as const;

export const Body_upload_course_materialSchema = {
    properties: {
        title: {
            type: 'string',
            title: 'Title'
        },
        file: {
            type: 'string',
            format: 'binary',
            title: 'File'
        }
    },
    type: 'object',
    required: ['title', 'file'],
    title: 'Body_upload_course_material'
} as const;

export const Body_users_login_access_tokenSchema = {
    properties: {
        grant_type: {
            anyOf: [
                {
                    type: 'string',
                    pattern: 'password'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Grant Type'
        },
        username: {
            type: 'string',
            title: 'Username'
        },
        password: {
            type: 'string',
            title: 'Password'
        },
        scope: {
            type: 'string',
            title: 'Scope',
            default: ''
        },
        client_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Id'
        },
        client_secret: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Secret'
        }
    },
    type: 'object',
    required: ['username', 'password'],
    title: 'Body_users-login_access_token'
} as const;

export const HTTPValidationErrorSchema = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const InitiateAgentResponseSchema = {
    properties: {
        thread_id: {
            type: 'string',
            format: 'uuid',
            title: 'Thread Id'
        },
        agent_run_id: {
            type: 'string',
            format: 'uuid',
            title: 'Agent Run Id'
        },
        message: {
            type: 'string',
            title: 'Message',
            default: 'Agent session initiated successfully'
        }
    },
    type: 'object',
    required: ['thread_id', 'agent_run_id'],
    title: 'InitiateAgentResponse',
    description: 'Agent initiation response schema.'
} as const;

export const LoginRequestSchema = {
    properties: {
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        },
        password: {
            type: 'string',
            title: 'Password'
        }
    },
    type: 'object',
    required: ['email', 'password'],
    title: 'LoginRequest',
    description: 'Login request schema.'
} as const;

export const LoginResponseSchema = {
    properties: {
        access_token: {
            type: 'string',
            title: 'Access Token'
        },
        token_type: {
            type: 'string',
            title: 'Token Type',
            default: 'bearer'
        }
    },
    type: 'object',
    required: ['access_token'],
    title: 'LoginResponse',
    description: 'Login response schema.'
} as const;

export const MessageSchema = {
    properties: {
        message: {
            type: 'string',
            title: 'Message'
        }
    },
    type: 'object',
    required: ['message'],
    title: 'Message',
    description: 'Generic message response.'
} as const;

export const RegisterRequestSchema = {
    properties: {
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        },
        password: {
            type: 'string',
            title: 'Password'
        },
        full_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        }
    },
    type: 'object',
    required: ['email', 'password'],
    title: 'RegisterRequest',
    description: 'Register request schema.'
} as const;

export const RegisterResponseSchema = {
    properties: {
        id: {
            type: 'string',
            title: 'Id'
        },
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        },
        full_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        }
    },
    type: 'object',
    required: ['id', 'email'],
    title: 'RegisterResponse',
    description: 'Register response schema.'
} as const;

export const ThreadCreateSchema = {
    properties: {
        title: {
            type: 'string',
            title: 'Title'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        }
    },
    type: 'object',
    required: ['title'],
    title: 'ThreadCreate',
    description: 'Thread creation schema.'
} as const;

export const ThreadMessageCreateSchema = {
    properties: {
        content: {
            type: 'string',
            title: 'Content'
        },
        role: {
            type: 'string',
            title: 'Role',
            default: 'user'
        }
    },
    type: 'object',
    required: ['content'],
    title: 'ThreadMessageCreate',
    description: 'Thread message creation schema.'
} as const;

export const ThreadMessagePublicSchema = {
    properties: {
        content: {
            type: 'string',
            maxLength: 10000,
            minLength: 1,
            title: 'Content'
        },
        role: {
            type: 'string',
            maxLength: 50,
            title: 'Role',
            default: 'user'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        thread_id: {
            type: 'string',
            format: 'uuid',
            title: 'Thread Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['content', 'id', 'thread_id', 'created_at', 'updated_at'],
    title: 'ThreadMessagePublic',
    description: 'Public thread message model.'
} as const;

export const ThreadMessageUpdateSchema = {
    properties: {
        content: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Content'
        },
        role: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Role'
        }
    },
    type: 'object',
    title: 'ThreadMessageUpdate',
    description: 'Thread message update schema.'
} as const;

export const ThreadMessagesPublicSchema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/ThreadMessagePublic'
            },
            type: 'array',
            title: 'Data'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'ThreadMessagesPublic',
    description: 'Public thread messages list model.'
} as const;

export const ThreadPublicSchema = {
    properties: {
        title: {
            type: 'string',
            maxLength: 255,
            minLength: 1,
            title: 'Title'
        },
        description: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 1000
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        owner_id: {
            type: 'string',
            format: 'uuid',
            title: 'Owner Id'
        },
        project_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Project Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['title', 'id', 'owner_id', 'project_id', 'created_at', 'updated_at'],
    title: 'ThreadPublic',
    description: 'Public thread model.'
} as const;

export const ThreadUpdateSchema = {
    properties: {
        title: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Title'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        }
    },
    type: 'object',
    title: 'ThreadUpdate',
    description: 'Thread update schema.'
} as const;

export const UpdatePasswordSchema = {
    properties: {
        current_password: {
            type: 'string',
            maxLength: 40,
            minLength: 8,
            title: 'Current Password'
        },
        new_password: {
            type: 'string',
            maxLength: 40,
            minLength: 8,
            title: 'New Password'
        }
    },
    type: 'object',
    required: ['current_password', 'new_password'],
    title: 'UpdatePassword',
    description: 'Password update schema.'
} as const;

export const UserCreateSchema = {
    properties: {
        email: {
            type: 'string',
            maxLength: 255,
            format: 'email',
            title: 'Email'
        },
        password: {
            type: 'string',
            maxLength: 40,
            minLength: 8,
            title: 'Password'
        },
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            default: true
        },
        is_superuser: {
            type: 'boolean',
            title: 'Is Superuser',
            default: false
        }
    },
    type: 'object',
    required: ['email', 'password'],
    title: 'UserCreate',
    description: 'User creation schema (admin).'
} as const;

export const UserPublicSchema = {
    properties: {
        email: {
            type: 'string',
            maxLength: 255,
            format: 'email',
            title: 'Email'
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            default: true
        },
        is_superuser: {
            type: 'boolean',
            title: 'Is Superuser',
            default: false
        },
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['email', 'id', 'created_at', 'updated_at'],
    title: 'UserPublic',
    description: 'Public user model.'
} as const;

export const UserUpdateSchema = {
    properties: {
        email: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255,
                    format: 'email'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        },
        password: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 40,
                    minLength: 8
                },
                {
                    type: 'null'
                }
            ],
            title: 'Password'
        },
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        },
        is_active: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Active'
        },
        is_superuser: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Superuser'
        }
    },
    type: 'object',
    title: 'UserUpdate',
    description: 'User update schema (admin).'
} as const;

export const UserUpdateMeSchema = {
    properties: {
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        },
        email: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255,
                    format: 'email'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        }
    },
    type: 'object',
    title: 'UserUpdateMe',
    description: 'User self-update schema.'
} as const;

export const UsersPublicSchema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/UserPublic'
            },
            type: 'array',
            title: 'Data'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'UsersPublic',
    description: 'Public users list model.'
} as const;

export const ValidationErrorSchema = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;