// This file is auto-generated by @hey-api/openapi-ts

import { type Client, formDataBodySerializer, type Options as Options2, type TDataShape, urlSearchParamsBodySerializer } from './client';
import { client } from './client.gen';
import type { AddCreditsData, AddCreditsErrors, AddCreditsResponses, AddKbEntryToVectorStoreData, AddKbEntryToVectorStoreErrors, AddKbEntryToVectorStoreResponses, AddKbFileToVectorStoreData, AddKbFileToVectorStoreErrors, AddKbFileToVectorStoreResponses, AddKbFolderToVectorStoreData, AddKbFolderToVectorStoreErrors, AddKbFolderToVectorStoreResponses, BatchCreatePagesData, BatchCreatePagesErrors, BatchCreatePagesResponses, ChunkPageContentData, ChunkPageContentErrors, ChunkPageContentResponses, CreateAgentData, CreateAgentErrors, CreateAgentResponses, CreateApiKeyData, CreateApiKeyErrors, CreateApiKeyResponses, CreateKbFolderData, CreateKbFolderErrors, CreateKbFolderResponses, CreatePageData, CreatePageErrors, CreatePageResponses, CreatePageSectionData, CreatePageSectionErrors, CreatePageSectionResponses, CreateProjectData, CreateProjectErrors, CreateProjectResponses, CreateThreadData, CreateThreadErrors, CreateThreadMessageData, CreateThreadMessageErrors, CreateThreadMessageResponses, CreateThreadResponses, CreateUserData, CreateUserErrors, CreateUserResponses, CreateVectorStoreData, CreateVectorStoreErrors, CreateVectorStoreForRagData, CreateVectorStoreForRagErrors, CreateVectorStoreForRagResponses, CreateVectorStoreResponses, DeleteAgentData, DeleteAgentErrors, DeleteAgentResponses, DeleteAgentRunData, DeleteAgentRunErrors, DeleteAgentRunResponses, DeleteApiKeyData, DeleteApiKeyErrors, DeleteApiKeyResponses, DeleteCurrentUserAccountData, DeleteCurrentUserAccountResponses, DeleteKbEntryData, DeleteKbEntryErrors, DeleteKbEntryResponses, DeleteKbFolderData, DeleteKbFolderErrors, DeleteKbFolderResponses, DeletePageData, DeletePageErrors, DeletePageResponses, DeletePageSectionData, DeletePageSectionErrors, DeletePageSectionResponses, DeleteProjectData, DeleteProjectErrors, DeleteProjectResponses, DeleteThreadData, DeleteThreadErrors, DeleteThreadMessageData, DeleteThreadMessageErrors, DeleteThreadMessageResponses, DeleteThreadResponses, DeleteUserData, DeleteUserErrors, DeleteUserResponses, DeleteVectorStoreData, DeleteVectorStoreErrors, DeleteVectorStoreResponses, DownloadKbEntryData, DownloadKbEntryErrors, DownloadKbEntryResponses, GenerateAgentIconData, GenerateAgentIconErrors, GenerateAgentIconResponses, GetAccountSummaryData, GetAccountSummaryResponses, GetAgentData, GetAgentErrors, GetAgentKbAssignmentsData, GetAgentKbAssignmentsErrors, GetAgentKbAssignmentsResponses, GetAgentResponses, GetAgentRunStatusData, GetAgentRunStatusErrors, GetAgentRunStatusResponses, GetApiKeyData, GetApiKeyErrors, GetApiKeyResponses, GetAvailableModelsData, GetAvailableModelsResponses, GetCreditBalanceData, GetCreditBalanceResponses, GetCurrentUserProfileData, GetCurrentUserProfileResponses, GetKbEntryContentData, GetKbEntryContentErrors, GetKbEntryContentResponses, GetKbEntryData, GetKbEntryErrors, GetKbEntryResponses, GetKbFolderData, GetKbFolderErrors, GetKbFolderResponses, GetKbStatsData, GetKbStatsResponses, GetPageByPathData, GetPageByPathErrors, GetPageByPathResponses, GetPageData, GetPageErrors, GetPageResponses, GetPageSectionData, GetPageSectionErrors, GetPageSectionResponses, GetPageWithSectionsData, GetPageWithSectionsErrors, GetPageWithSectionsResponses, GetProjectApiKeysData, GetProjectApiKeysErrors, GetProjectApiKeysResponses, GetProjectData, GetProjectErrors, GetProjectResponses, GetProjectStatsData, GetProjectStatsErrors, GetProjectStatsResponses, GetProjectThreadsData, GetProjectThreadsErrors, GetProjectThreadsResponses, GetThreadData, GetThreadErrors, GetThreadMessageData, GetThreadMessageErrors, GetThreadMessageResponses, GetThreadMessagesData, GetThreadMessagesErrors, GetThreadMessagesResponses, GetThreadResponses, GetTransactionsData, GetTransactionsErrors, GetTransactionsResponses, GetUserByIdData, GetUserByIdErrors, GetUserByIdResponses, GetVectorStoreData, GetVectorStoreErrors, GetVectorStoreResponses, GetVectorStoreStatsData, GetVectorStoreStatsErrors, GetVectorStoreStatsResponses, InitiateAgentSessionData, InitiateAgentSessionErrors, InitiateAgentSessionResponses, ListActiveAgentRunsData, ListActiveAgentRunsErrors, ListActiveAgentRunsResponses, ListAgentsData, ListAgentsErrors, ListAgentsResponses, ListApiKeysData, ListApiKeysErrors, ListApiKeysResponses, ListEduAiThreadsData, ListEduAiThreadsErrors, ListEduAiThreadsResponses, ListFolderEntriesData, ListFolderEntriesErrors, ListFolderEntriesResponses, ListKbFoldersData, ListKbFoldersErrors, ListKbFoldersResponses, ListPagesData, ListPageSectionsData, ListPageSectionsErrors, ListPageSectionsResponses, ListPagesErrors, ListPagesResponses, ListProjectVectorStoresData, ListProjectVectorStoresErrors, ListProjectVectorStoresResponses, ListThreadAgentRunsData, ListThreadAgentRunsErrors, ListThreadAgentRunsResponses, ListUserProjectsData, ListUserProjectsErrors, ListUserProjectsResponses, ListUsersData, ListUsersErrors, ListUsersResponses, LoginAccessTokenData, LoginAccessTokenErrors, LoginAccessTokenResponses, LoginData, LoginErrors, LoginResponses, MoveKbEntryData, MoveKbEntryErrors, MoveKbEntryResponses, RegisterData, RegisterErrors, RegisterResponses, RetryAgentRunData, RetryAgentRunErrors, RetryAgentRunResponses, SearchPageSectionsData, SearchPageSectionsErrors, SearchPageSectionsResponses, StartAgentRunData, StartAgentRunErrors, StartAgentRunResponses, StartDemoEducationalTaskData, StartDemoEducationalTaskErrors, StartDemoEducationalTaskResponses, StopAgentRunData, StopAgentRunErrors, StopAgentRunResponses, StreamAgentRunData, StreamAgentRunErrors, StreamAgentRunResponses, UpdateAgentData, UpdateAgentErrors, UpdateAgentKbAssignmentsData, UpdateAgentKbAssignmentsErrors, UpdateAgentKbAssignmentsResponses, UpdateAgentResponses, UpdateApiKeyData, UpdateApiKeyErrors, UpdateApiKeyResponses, UpdateCurrentUserPasswordData, UpdateCurrentUserPasswordErrors, UpdateCurrentUserPasswordResponses, UpdateCurrentUserProfileData, UpdateCurrentUserProfileErrors, UpdateCurrentUserProfileResponses, UpdateKbEntryData, UpdateKbEntryErrors, UpdateKbEntryResponses, UpdateKbFolderData, UpdateKbFolderErrors, UpdateKbFolderResponses, UpdatePageData, UpdatePageErrors, UpdatePageResponses, UpdatePageSectionData, UpdatePageSectionErrors, UpdatePageSectionResponses, UpdateProjectData, UpdateProjectErrors, UpdateProjectResponses, UpdateThreadData, UpdateThreadErrors, UpdateThreadMessageData, UpdateThreadMessageErrors, UpdateThreadMessageResponses, UpdateThreadResponses, UpdateUserData, UpdateUserErrors, UpdateUserResponses, UpdateVectorStoreData, UpdateVectorStoreErrors, UpdateVectorStoreResponses, UploadFileToFolderData, UploadFileToFolderErrors, UploadFileToFolderResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export class UsersService {
    /**
     * Login with Access Token
     *
     * OAuth2 compatible token login.
     */
    public static login_access_token<ThrowOnError extends boolean = false>(options: Options<LoginAccessTokenData, ThrowOnError>) {
        return (options.client ?? client).post<LoginAccessTokenResponses, LoginAccessTokenErrors, ThrowOnError>({
            ...urlSearchParamsBodySerializer,
            responseType: 'json',
            url: '/api/v1/users/login/access-token',
            ...options,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                ...options.headers
            }
        });
    }
    
    /**
     * Login User
     *
     * Login with email and password.
     */
    public static login<ThrowOnError extends boolean = false>(options: Options<LoginData, ThrowOnError>) {
        return (options.client ?? client).post<LoginResponses, LoginErrors, ThrowOnError>({
            responseType: 'json',
            url: '/api/v1/users/login',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Register User
     *
     * Register new user.
     */
    public static register<ThrowOnError extends boolean = false>(options: Options<RegisterData, ThrowOnError>) {
        return (options.client ?? client).post<RegisterResponses, RegisterErrors, ThrowOnError>({
            responseType: 'json',
            url: '/api/v1/users/register',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * List Users
     *
     * Get all users (superuser only).
     */
    public static list_users<ThrowOnError extends boolean = false>(options?: Options<ListUsersData, ThrowOnError>) {
        return (options?.client ?? client).get<ListUsersResponses, ListUsersErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users',
            ...options
        });
    }
    
    /**
     * Create User
     *
     * Create new user (superuser only).
     */
    public static create_user<ThrowOnError extends boolean = false>(options: Options<CreateUserData, ThrowOnError>) {
        return (options.client ?? client).post<CreateUserResponses, CreateUserErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Delete User
     *
     * Delete user (superuser only).
     */
    public static delete_user<ThrowOnError extends boolean = false>(options: Options<DeleteUserData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteUserResponses, DeleteUserErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/{user_id}',
            ...options
        });
    }
    
    /**
     * Get User by ID
     *
     * Get user by ID. Own profile or superuser only.
     */
    public static get_user_by_id<ThrowOnError extends boolean = false>(options: Options<GetUserByIdData, ThrowOnError>) {
        return (options.client ?? client).get<GetUserByIdResponses, GetUserByIdErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/{user_id}',
            ...options
        });
    }
    
    /**
     * Update User
     *
     * Update user (superuser only).
     */
    public static update_user<ThrowOnError extends boolean = false>(options: Options<UpdateUserData, ThrowOnError>) {
        return (options.client ?? client).patch<UpdateUserResponses, UpdateUserErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/{user_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Get Current User Profile
     *
     * Get current user profile.
     */
    public static get_current_user_profile<ThrowOnError extends boolean = false>(options?: Options<GetCurrentUserProfileData, ThrowOnError>) {
        return (options?.client ?? client).get<GetCurrentUserProfileResponses, unknown, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/me/profile',
            ...options
        });
    }
    
    /**
     * Update Current User Profile
     *
     * Update current user profile.
     */
    public static update_current_user_profile<ThrowOnError extends boolean = false>(options: Options<UpdateCurrentUserProfileData, ThrowOnError>) {
        return (options.client ?? client).patch<UpdateCurrentUserProfileResponses, UpdateCurrentUserProfileErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/me/profile',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Update Current User Password
     *
     * Update current user password.
     */
    public static update_current_user_password<ThrowOnError extends boolean = false>(options: Options<UpdateCurrentUserPasswordData, ThrowOnError>) {
        return (options.client ?? client).patch<UpdateCurrentUserPasswordResponses, UpdateCurrentUserPasswordErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/me/password',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Delete Current User Account
     *
     * Delete current user account.
     */
    public static delete_current_user_account<ThrowOnError extends boolean = false>(options?: Options<DeleteCurrentUserAccountData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteCurrentUserAccountResponses, unknown, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/me',
            ...options
        });
    }
}

export class AuthService {
    /**
     * Login with Access Token
     *
     * OAuth2 compatible token login.
     */
    public static login_access_token<ThrowOnError extends boolean = false>(options: Options<LoginAccessTokenData, ThrowOnError>) {
        return (options.client ?? client).post<LoginAccessTokenResponses, LoginAccessTokenErrors, ThrowOnError>({
            ...urlSearchParamsBodySerializer,
            responseType: 'json',
            url: '/api/v1/users/login/access-token',
            ...options,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                ...options.headers
            }
        });
    }
    
    /**
     * Login User
     *
     * Login with email and password.
     */
    public static login<ThrowOnError extends boolean = false>(options: Options<LoginData, ThrowOnError>) {
        return (options.client ?? client).post<LoginResponses, LoginErrors, ThrowOnError>({
            responseType: 'json',
            url: '/api/v1/users/login',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Register User
     *
     * Register new user.
     */
    public static register<ThrowOnError extends boolean = false>(options: Options<RegisterData, ThrowOnError>) {
        return (options.client ?? client).post<RegisterResponses, RegisterErrors, ThrowOnError>({
            responseType: 'json',
            url: '/api/v1/users/register',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class ProjectsService {
    /**
     * List User Projects
     *
     * List projects owned by the user, optionally including public projects.
     */
    public static list_user_projects<ThrowOnError extends boolean = false>(options?: Options<ListUserProjectsData, ThrowOnError>) {
        return (options?.client ?? client).get<ListUserProjectsResponses, ListUserProjectsErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/projects',
            ...options
        });
    }
    
    /**
     * Create Project
     *
     * Create a new project.
     */
    public static create_project<ThrowOnError extends boolean = false>(options: Options<CreateProjectData, ThrowOnError>) {
        return (options.client ?? client).post<CreateProjectResponses, CreateProjectErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/projects',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Delete Project
     *
     * Delete a project and all associated threads.
     */
    public static delete_project<ThrowOnError extends boolean = false>(options: Options<DeleteProjectData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteProjectResponses, DeleteProjectErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/projects/{project_id}',
            ...options
        });
    }
    
    /**
     * Get Project
     *
     * Get a specific project by ID.
     */
    public static get_project<ThrowOnError extends boolean = false>(options: Options<GetProjectData, ThrowOnError>) {
        return (options.client ?? client).get<GetProjectResponses, GetProjectErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/projects/{project_id}',
            ...options
        });
    }
    
    /**
     * Update Project
     *
     * Update an existing project.
     */
    public static update_project<ThrowOnError extends boolean = false>(options: Options<UpdateProjectData, ThrowOnError>) {
        return (options.client ?? client).put<UpdateProjectResponses, UpdateProjectErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/projects/{project_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Get Project Threads
     *
     * Get all threads belonging to a specific project.
     */
    public static get_project_threads<ThrowOnError extends boolean = false>(options: Options<GetProjectThreadsData, ThrowOnError>) {
        return (options.client ?? client).get<GetProjectThreadsResponses, GetProjectThreadsErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/projects/{project_id}/threads',
            ...options
        });
    }
    
    /**
     * Get Project Statistics
     *
     * Get statistics for a project.
     */
    public static get_project_stats<ThrowOnError extends boolean = false>(options: Options<GetProjectStatsData, ThrowOnError>) {
        return (options.client ?? client).get<GetProjectStatsResponses, GetProjectStatsErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/projects/{project_id}/stats',
            ...options
        });
    }
}

export class EduAiService {
    /**
     * List Educational AI Threads
     *
     * Get threads for educational AI module filtered by project.
     *
     * This endpoint returns threads for a specific project with target_type "edu_ai_task".
     *
     * Args:
     * project_id: Required project ID to filter threads
     * pagination: Standard pagination parameters
     *
     * Returns:
     * Paginated list of edu_ai_task threads for the project
     */
    public static list_edu_ai_threads<ThrowOnError extends boolean = false>(options: Options<ListEduAiThreadsData, ThrowOnError>) {
        return (options.client ?? client).get<ListEduAiThreadsResponses, ListEduAiThreadsErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/threads',
            ...options
        });
    }
    
    /**
     * Start Demo Educational Task
     *
     * Start a demo educational AI processing task in the background.
     *
     * This endpoint follows the agent_runs pattern:
     * 1. User and project validation
     * 2. Creates Thread and AgentRun records for tracking
     * 3. Registers in Redis for distributed tracking
     * 4. Triggers background task with dramatiq
     * 5. Returns run information for monitoring
     *
     * Args:
     * project_id: The project ID for context
     * task_name: Optional name for the demo task
     *
     * Returns:
     * Task information and status
     */
    public static start_demo_educational_task<ThrowOnError extends boolean = false>(options: Options<StartDemoEducationalTaskData, ThrowOnError>) {
        return (options.client ?? client).post<StartDemoEducationalTaskResponses, StartDemoEducationalTaskErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/demo/start',
            ...options
        });
    }
    
    /**
     * Create Vector Store for RAG
     *
     * Create a new vector store for RAG operations.
     */
    public static create_vector_store_for_rag<ThrowOnError extends boolean = false>(options: Options<CreateVectorStoreForRagData, ThrowOnError>) {
        return (options.client ?? client).post<CreateVectorStoreForRagResponses, CreateVectorStoreForRagErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/edu-ai/vector-store/create',
            ...options
        });
    }
    
    /**
     * Add Knowledge Base Entry to Vector Store
     *
     * Add a knowledge base entry to vector store.
     */
    public static add_kb_entry_to_vector_store<ThrowOnError extends boolean = false>(options: Options<AddKbEntryToVectorStoreData, ThrowOnError>) {
        return (options.client ?? client).post<AddKbEntryToVectorStoreResponses, AddKbEntryToVectorStoreErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/edu-ai/vector-store/{vector_store_id}/add-kb-entry',
            ...options
        });
    }
    
    /**
     * Add All KB Files from Folder
     *
     * Bulk process all files in a knowledge base folder.
     */
    public static add_kb_folder_to_vector_store<ThrowOnError extends boolean = false>(options: Options<AddKbFolderToVectorStoreData, ThrowOnError>) {
        return (options.client ?? client).post<AddKbFolderToVectorStoreResponses, AddKbFolderToVectorStoreErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/edu-ai/vector-store/{vector_store_id}/add-kb-folder',
            ...options
        });
    }
    
    /**
     * Get Vector Store Statistics
     *
     * Get statistics for a vector store.
     */
    public static get_vector_store_stats<ThrowOnError extends boolean = false>(options: Options<GetVectorStoreStatsData, ThrowOnError>) {
        return (options.client ?? client).get<GetVectorStoreStatsResponses, GetVectorStoreStatsErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/edu-ai/vector-store/{vector_store_id}/stats',
            ...options
        });
    }
}

export class EduAiThreadsService {
    /**
     * List Educational AI Threads
     *
     * Get threads for educational AI module filtered by project.
     *
     * This endpoint returns threads for a specific project with target_type "edu_ai_task".
     *
     * Args:
     * project_id: Required project ID to filter threads
     * pagination: Standard pagination parameters
     *
     * Returns:
     * Paginated list of edu_ai_task threads for the project
     */
    public static list_edu_ai_threads<ThrowOnError extends boolean = false>(options: Options<ListEduAiThreadsData, ThrowOnError>) {
        return (options.client ?? client).get<ListEduAiThreadsResponses, ListEduAiThreadsErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/threads',
            ...options
        });
    }
}

export class ThreadsService {
    /**
     * Create Thread
     *
     * Create new thread.
     */
    public static create_thread<ThrowOnError extends boolean = false>(options: Options<CreateThreadData, ThrowOnError>) {
        return (options.client ?? client).post<CreateThreadResponses, CreateThreadErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/threads',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Delete Thread
     *
     * Delete thread and all associated messages.
     */
    public static delete_thread<ThrowOnError extends boolean = false>(options: Options<DeleteThreadData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteThreadResponses, DeleteThreadErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/threads/{thread_id}',
            ...options
        });
    }
    
    /**
     * Get Thread
     *
     * Get a specific thread by ID.
     */
    public static get_thread<ThrowOnError extends boolean = false>(options: Options<GetThreadData, ThrowOnError>) {
        return (options.client ?? client).get<GetThreadResponses, GetThreadErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/threads/{thread_id}',
            ...options
        });
    }
    
    /**
     * Update Thread
     *
     * Update thread.
     */
    public static update_thread<ThrowOnError extends boolean = false>(options: Options<UpdateThreadData, ThrowOnError>) {
        return (options.client ?? client).patch<UpdateThreadResponses, UpdateThreadErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/threads/{thread_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Get Thread Messages
     *
     * Get all messages for a thread with pagination.
     */
    public static get_thread_messages<ThrowOnError extends boolean = false>(options: Options<GetThreadMessagesData, ThrowOnError>) {
        return (options.client ?? client).get<GetThreadMessagesResponses, GetThreadMessagesErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/threads/{thread_id}/messages',
            ...options
        });
    }
    
    /**
     * Create Message
     *
     * Create new message in a thread.
     */
    public static create_thread_message<ThrowOnError extends boolean = false>(options: Options<CreateThreadMessageData, ThrowOnError>) {
        return (options.client ?? client).post<CreateThreadMessageResponses, CreateThreadMessageErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/threads/{thread_id}/messages',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Delete Message
     *
     * Delete message from thread.
     */
    public static delete_thread_message<ThrowOnError extends boolean = false>(options: Options<DeleteThreadMessageData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteThreadMessageResponses, DeleteThreadMessageErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/threads/{thread_id}/messages/{message_id}',
            ...options
        });
    }
    
    /**
     * Get Message
     *
     * Get specific message by ID.
     */
    public static get_thread_message<ThrowOnError extends boolean = false>(options: Options<GetThreadMessageData, ThrowOnError>) {
        return (options.client ?? client).get<GetThreadMessageResponses, GetThreadMessageErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/threads/{thread_id}/messages/{message_id}',
            ...options
        });
    }
    
    /**
     * Update Message
     *
     * Update message.
     */
    public static update_thread_message<ThrowOnError extends boolean = false>(options: Options<UpdateThreadMessageData, ThrowOnError>) {
        return (options.client ?? client).patch<UpdateThreadMessageResponses, UpdateThreadMessageErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/threads/{thread_id}/messages/{message_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class AgentsService {
    /**
     * List agents with pagination, search, and filtering
     *
     * List agents with pagination, search, and filtering.
     */
    public static list_agents<ThrowOnError extends boolean = false>(options?: Options<ListAgentsData, ThrowOnError>) {
        return (options?.client ?? client).get<ListAgentsResponses, ListAgentsErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/agents',
            ...options
        });
    }
    
    /**
     * Create Agent
     *
     * Create a new agent.
     */
    public static create_agent<ThrowOnError extends boolean = false>(options: Options<CreateAgentData, ThrowOnError>) {
        return (options.client ?? client).post<CreateAgentResponses, CreateAgentErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/agents',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Delete agent
     *
     * Delete an agent.
     */
    public static delete_agent<ThrowOnError extends boolean = false>(options: Options<DeleteAgentData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteAgentResponses, DeleteAgentErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/agents/{agent_id}',
            ...options
        });
    }
    
    /**
     * Get agent details
     *
     * Get a single agent with full configuration.
     */
    public static get_agent<ThrowOnError extends boolean = false>(options: Options<GetAgentData, ThrowOnError>) {
        return (options.client ?? client).get<GetAgentResponses, GetAgentErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/agents/{agent_id}',
            ...options
        });
    }
    
    /**
     * Update agent
     *
     * Update an agent.
     */
    public static update_agent<ThrowOnError extends boolean = false>(options: Options<UpdateAgentData, ThrowOnError>) {
        return (options.client ?? client).put<UpdateAgentResponses, UpdateAgentErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/agents/{agent_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Generate Agent Icon
     *
     * Generate an appropriate icon and colors for an agent based on its name.
     */
    public static generate_agent_icon<ThrowOnError extends boolean = false>(options: Options<GenerateAgentIconData, ThrowOnError>) {
        return (options.client ?? client).post<GenerateAgentIconResponses, GenerateAgentIconErrors, ThrowOnError>({
            responseType: 'json',
            url: '/api/v1/agents/generate-icon',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class AgentRunsService {
    /**
     * Start Agent Run
     *
     * Start an agent for a specific thread in the background.
     *
     * This endpoint:
     * 1. Loads the thread and verifies access
     * 2. Loads the specified agent (or default agent if not specified)
     * 3. Creates an agent run record
     * 4. Triggers background agent execution
     */
    public static start_agent_run<ThrowOnError extends boolean = false>(options: Options<StartAgentRunData, ThrowOnError>) {
        return (options.client ?? client).post<StartAgentRunResponses, StartAgentRunErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/threads/{thread_id}/agent/start',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Initiate Agent Session
     *
     * Initiate a new agent session with optional file attachments.
     *
     * This endpoint:
     * 1. Loads the specified agent (or default agent if not specified)
     * 2. Creates a new thread for the conversation
     * 3. Adds the initial user message to the thread
     * 4. Creates an agent run record
     * 5. Optionally handles file uploads (stored as metadata)
     */
    public static initiate_agent_session<ThrowOnError extends boolean = false>(options: Options<InitiateAgentSessionData, ThrowOnError>) {
        return (options.client ?? client).post<InitiateAgentSessionResponses, InitiateAgentSessionErrors, ThrowOnError>({
            ...formDataBodySerializer,
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/agent/initiate',
            ...options,
            headers: {
                'Content-Type': null,
                ...options.headers
            }
        });
    }
    
    /**
     * List Active Agent Runs
     *
     * Get all active (running) agent runs for the current user.
     */
    public static list_active_agent_runs<ThrowOnError extends boolean = false>(options?: Options<ListActiveAgentRunsData, ThrowOnError>) {
        return (options?.client ?? client).get<ListActiveAgentRunsResponses, ListActiveAgentRunsErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/agent-runs/active',
            ...options
        });
    }
    
    /**
     * List Thread Agent Runs
     *
     * Get all agent runs for a specific thread.
     */
    public static list_thread_agent_runs<ThrowOnError extends boolean = false>(options: Options<ListThreadAgentRunsData, ThrowOnError>) {
        return (options.client ?? client).get<ListThreadAgentRunsResponses, ListThreadAgentRunsErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/threads/{thread_id}/agent-runs',
            ...options
        });
    }
    
    /**
     * Delete Agent Run
     *
     * Delete an agent run. Only the owner can delete their own runs.
     *
     * Checks that:
     * 1. Agent run exists
     * 2. Current user is the owner of the thread that contains this run
     */
    public static delete_agent_run<ThrowOnError extends boolean = false>(options: Options<DeleteAgentRunData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteAgentRunResponses, DeleteAgentRunErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/agent-runs/{agent_run_id}',
            ...options
        });
    }
    
    /**
     * Get Agent Run Status
     *
     * Get the status and details of an agent run.
     */
    public static get_agent_run_status<ThrowOnError extends boolean = false>(options: Options<GetAgentRunStatusData, ThrowOnError>) {
        return (options.client ?? client).get<GetAgentRunStatusResponses, GetAgentRunStatusErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/agent-runs/{agent_run_id}',
            ...options
        });
    }
    
    /**
     * Stop Agent Run
     *
     * Stop a running agent run.
     *
     * Only the thread owner or superuser can stop an agent run.
     */
    public static stop_agent_run<ThrowOnError extends boolean = false>(options: Options<StopAgentRunData, ThrowOnError>) {
        return (options.client ?? client).post<StopAgentRunResponses, StopAgentRunErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/agent-runs/{agent_run_id}/stop',
            ...options
        });
    }
    
    /**
     * Retry Failed Agent Run
     *
     * Retry a failed agent run.
     *
     * Only the thread owner or superuser can retry an agent run.
     * Only failed or cancelled runs can be retried.
     */
    public static retry_agent_run<ThrowOnError extends boolean = false>(options: Options<RetryAgentRunData, ThrowOnError>) {
        return (options.client ?? client).post<RetryAgentRunResponses, RetryAgentRunErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/agent-runs/{agent_run_id}/retry',
            ...options
        });
    }
    
    /**
     * Stream Agent Run
     *
     * Stream the responses of an agent run using Redis Lists and Pub/Sub.
     *
     * This endpoint provides real-time streaming of agent run updates using Server-Sent Events (SSE).
     * It follows the same pattern as the backend_suna streaming implementation.
     */
    public static stream_agent_run<ThrowOnError extends boolean = false>(options: Options<StreamAgentRunData, ThrowOnError>) {
        return (options.client ?? client).get<StreamAgentRunResponses, StreamAgentRunErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/agent-run/{agent_run_id}/stream',
            ...options
        });
    }
}

export class ApiKeysService {
    /**
     * List API Keys
     *
     * List user's API keys, optionally filtered by project.
     */
    public static list_api_keys<ThrowOnError extends boolean = false>(options?: Options<ListApiKeysData, ThrowOnError>) {
        return (options?.client ?? client).get<ListApiKeysResponses, ListApiKeysErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/api-keys',
            ...options
        });
    }
    
    /**
     * Create API Key
     *
     * Create a new API key.
     */
    public static create_api_key<ThrowOnError extends boolean = false>(options: Options<CreateApiKeyData, ThrowOnError>) {
        return (options.client ?? client).post<CreateApiKeyResponses, CreateApiKeyErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/api-keys',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Delete API Key
     *
     * Delete an API key.
     */
    public static delete_api_key<ThrowOnError extends boolean = false>(options: Options<DeleteApiKeyData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteApiKeyResponses, DeleteApiKeyErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/api-keys/{api_key_id}',
            ...options
        });
    }
    
    /**
     * Get API Key
     *
     * Get a specific API key by ID.
     */
    public static get_api_key<ThrowOnError extends boolean = false>(options: Options<GetApiKeyData, ThrowOnError>) {
        return (options.client ?? client).get<GetApiKeyResponses, GetApiKeyErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/api-keys/{api_key_id}',
            ...options
        });
    }
    
    /**
     * Update API Key
     *
     * Update an existing API key.
     */
    public static update_api_key<ThrowOnError extends boolean = false>(options: Options<UpdateApiKeyData, ThrowOnError>) {
        return (options.client ?? client).put<UpdateApiKeyResponses, UpdateApiKeyErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/api-keys/{api_key_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Get Project API Keys
     *
     * Get all API keys for a specific project.
     */
    public static get_project_api_keys<ThrowOnError extends boolean = false>(options: Options<GetProjectApiKeysData, ThrowOnError>) {
        return (options.client ?? client).get<GetProjectApiKeysResponses, GetProjectApiKeysErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/projects/{project_id}/api-keys',
            ...options
        });
    }
}

export class VectorStoreService {
    /**
     * List Project Vector Stores
     *
     * List all vector stores for a specific project.
     */
    public static list_project_vector_stores<ThrowOnError extends boolean = false>(options: Options<ListProjectVectorStoresData, ThrowOnError>) {
        return (options.client ?? client).get<ListProjectVectorStoresResponses, ListProjectVectorStoresErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/projects/{project_id}/vector-stores',
            ...options
        });
    }
    
    /**
     * Create Vector Store
     *
     * Create a new vector store for a project.
     */
    public static create_vector_store<ThrowOnError extends boolean = false>(options: Options<CreateVectorStoreData, ThrowOnError>) {
        return (options.client ?? client).post<CreateVectorStoreResponses, CreateVectorStoreErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/projects/{project_id}/vector-stores',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Delete Vector Store
     *
     * Delete a vector store.
     */
    public static delete_vector_store<ThrowOnError extends boolean = false>(options: Options<DeleteVectorStoreData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteVectorStoreResponses, DeleteVectorStoreErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/vector-stores/{vector_store_id}',
            ...options
        });
    }
    
    /**
     * Get Vector Store
     *
     * Get a specific vector store by ID.
     */
    public static get_vector_store<ThrowOnError extends boolean = false>(options: Options<GetVectorStoreData, ThrowOnError>) {
        return (options.client ?? client).get<GetVectorStoreResponses, GetVectorStoreErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/vector-stores/{vector_store_id}',
            ...options
        });
    }
    
    /**
     * Update Vector Store
     *
     * Update an existing vector store.
     */
    public static update_vector_store<ThrowOnError extends boolean = false>(options: Options<UpdateVectorStoreData, ThrowOnError>) {
        return (options.client ?? client).put<UpdateVectorStoreResponses, UpdateVectorStoreErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/vector-stores/{vector_store_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * List Pages
     *
     * List all pages in a vector store.
     */
    public static list_pages<ThrowOnError extends boolean = false>(options: Options<ListPagesData, ThrowOnError>) {
        return (options.client ?? client).get<ListPagesResponses, ListPagesErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/vector-stores/{vector_store_id}/pages',
            ...options
        });
    }
    
    /**
     * Create Page
     *
     * Create a new page in a vector store.
     */
    public static create_page<ThrowOnError extends boolean = false>(options: Options<CreatePageData, ThrowOnError>) {
        return (options.client ?? client).post<CreatePageResponses, CreatePageErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/vector-stores/{vector_store_id}/pages',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Delete Page
     *
     * Delete a page and all its sections.
     */
    public static delete_page<ThrowOnError extends boolean = false>(options: Options<DeletePageData, ThrowOnError>) {
        return (options.client ?? client).delete<DeletePageResponses, DeletePageErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/pages/{page_id}',
            ...options
        });
    }
    
    /**
     * Get Page
     *
     * Get a specific page by ID.
     */
    public static get_page<ThrowOnError extends boolean = false>(options: Options<GetPageData, ThrowOnError>) {
        return (options.client ?? client).get<GetPageResponses, GetPageErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/pages/{page_id}',
            ...options
        });
    }
    
    /**
     * Update Page
     *
     * Update an existing page.
     */
    public static update_page<ThrowOnError extends boolean = false>(options: Options<UpdatePageData, ThrowOnError>) {
        return (options.client ?? client).put<UpdatePageResponses, UpdatePageErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/pages/{page_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Get Page by Path
     *
     * Get a page by its unique path (like chatbot's read by ID).
     */
    public static get_page_by_path<ThrowOnError extends boolean = false>(options: Options<GetPageByPathData, ThrowOnError>) {
        return (options.client ?? client).get<GetPageByPathResponses, GetPageByPathErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/vector-stores/{vector_store_id}/pages/by-path',
            ...options
        });
    }
    
    /**
     * List Page Sections
     *
     * List all sections for a page.
     */
    public static list_page_sections<ThrowOnError extends boolean = false>(options: Options<ListPageSectionsData, ThrowOnError>) {
        return (options.client ?? client).get<ListPageSectionsResponses, ListPageSectionsErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/pages/{page_id}/sections',
            ...options
        });
    }
    
    /**
     * Create Page Section
     *
     * Create a new page section.
     */
    public static create_page_section<ThrowOnError extends boolean = false>(options: Options<CreatePageSectionData, ThrowOnError>) {
        return (options.client ?? client).post<CreatePageSectionResponses, CreatePageSectionErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/pages/{page_id}/sections',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Delete Page Section
     *
     * Delete a page section.
     */
    public static delete_page_section<ThrowOnError extends boolean = false>(options: Options<DeletePageSectionData, ThrowOnError>) {
        return (options.client ?? client).delete<DeletePageSectionResponses, DeletePageSectionErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/sections/{section_id}',
            ...options
        });
    }
    
    /**
     * Get Page Section
     *
     * Get a specific page section by ID.
     */
    public static get_page_section<ThrowOnError extends boolean = false>(options: Options<GetPageSectionData, ThrowOnError>) {
        return (options.client ?? client).get<GetPageSectionResponses, GetPageSectionErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/sections/{section_id}',
            ...options
        });
    }
    
    /**
     * Update Page Section
     *
     * Update an existing page section.
     */
    public static update_page_section<ThrowOnError extends boolean = false>(options: Options<UpdatePageSectionData, ThrowOnError>) {
        return (options.client ?? client).put<UpdatePageSectionResponses, UpdatePageSectionErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/sections/{section_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Get Page with All Sections
     *
     * Get page and all its sections in one call (like chatbot's /read/all).
     */
    public static get_page_with_sections<ThrowOnError extends boolean = false>(options: Options<GetPageWithSectionsData, ThrowOnError>) {
        return (options.client ?? client).get<GetPageWithSectionsResponses, GetPageWithSectionsErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/pages/{page_id}/with-sections',
            ...options
        });
    }
    
    /**
     * Batch Create Pages
     *
     * Create multiple pages at once (like chatbot's /ingest with list).
     */
    public static batch_create_pages<ThrowOnError extends boolean = false>(options: Options<BatchCreatePagesData, ThrowOnError>) {
        return (options.client ?? client).post<BatchCreatePagesResponses, BatchCreatePagesErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/vector-stores/{vector_store_id}/pages/batch',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Chunk Page Content
     *
     * Chunk page content into sections automatically.
     */
    public static chunk_page_content<ThrowOnError extends boolean = false>(options: Options<ChunkPageContentData, ThrowOnError>) {
        return (options.client ?? client).post<ChunkPageContentResponses, ChunkPageContentErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/pages/{page_id}/chunk',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Add Knowledge Base File
     *
     * Add knowledge base file to vector store.
     *
     * File must be uploaded to KB first, then reference it here by kb_entry_id.
     */
    public static add_kb_file_to_vector_store<ThrowOnError extends boolean = false>(options: Options<AddKbFileToVectorStoreData, ThrowOnError>) {
        return (options.client ?? client).post<AddKbFileToVectorStoreResponses, AddKbFileToVectorStoreErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/vector-stores/{vector_store_id}/add-kb-file',
            ...options
        });
    }
    
    /**
     * Semantic Search Page Sections
     *
     * Semantic search using vector embeddings.
     *
     * Providers:
     * - pgvector: Direct PostgreSQL pgvector search (default, good for small-medium datasets)
     * - faiss: FAISS in-memory search (fast for large datasets, loads fresh index)
     *
     * Requires embeddings to be generated first via embedding service.
     *
     * Note: No owner_id filtering - searches across all data in vector store.
     */
    public static search_page_sections<ThrowOnError extends boolean = false>(options: Options<SearchPageSectionsData, ThrowOnError>) {
        return (options.client ?? client).post<SearchPageSectionsResponses, SearchPageSectionsErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/vector-stores/{vector_store_id}/search',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class KnowledgeBaseService {
    /**
     * List Knowledge Base Folders
     *
     * Get all knowledge base folders for the current user.
     */
    public static list_kb_folders<ThrowOnError extends boolean = false>(options?: Options<ListKbFoldersData, ThrowOnError>) {
        return (options?.client ?? client).get<ListKbFoldersResponses, ListKbFoldersErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/knowledge-base/folders',
            ...options
        });
    }
    
    /**
     * Create Knowledge Base Folder
     *
     * Create a new knowledge base folder.
     */
    public static create_kb_folder<ThrowOnError extends boolean = false>(options: Options<CreateKbFolderData, ThrowOnError>) {
        return (options.client ?? client).post<CreateKbFolderResponses, CreateKbFolderErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/knowledge-base/folders',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Delete Knowledge Base Folder
     *
     * Delete a knowledge base folder and all its entries.
     */
    public static delete_kb_folder<ThrowOnError extends boolean = false>(options: Options<DeleteKbFolderData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteKbFolderResponses, DeleteKbFolderErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/knowledge-base/folders/{folder_id}',
            ...options
        });
    }
    
    /**
     * Get Knowledge Base Folder
     *
     * Get a specific knowledge base folder.
     */
    public static get_kb_folder<ThrowOnError extends boolean = false>(options: Options<GetKbFolderData, ThrowOnError>) {
        return (options.client ?? client).get<GetKbFolderResponses, GetKbFolderErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/knowledge-base/folders/{folder_id}',
            ...options
        });
    }
    
    /**
     * Update Knowledge Base Folder
     *
     * Update a knowledge base folder.
     */
    public static update_kb_folder<ThrowOnError extends boolean = false>(options: Options<UpdateKbFolderData, ThrowOnError>) {
        return (options.client ?? client).put<UpdateKbFolderResponses, UpdateKbFolderErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/knowledge-base/folders/{folder_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * List Folder Entries
     *
     * Get all entries in a folder.
     */
    public static list_folder_entries<ThrowOnError extends boolean = false>(options: Options<ListFolderEntriesData, ThrowOnError>) {
        return (options.client ?? client).get<ListFolderEntriesResponses, ListFolderEntriesErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/knowledge-base/folders/{folder_id}/entries',
            ...options
        });
    }
    
    /**
     * Upload File to Folder
     *
     * Upload a file to a knowledge base folder.
     */
    public static upload_file_to_folder<ThrowOnError extends boolean = false>(options: Options<UploadFileToFolderData, ThrowOnError>) {
        return (options.client ?? client).post<UploadFileToFolderResponses, UploadFileToFolderErrors, ThrowOnError>({
            ...formDataBodySerializer,
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/knowledge-base/folders/{folder_id}/upload',
            ...options,
            headers: {
                'Content-Type': null,
                ...options.headers
            }
        });
    }
    
    /**
     * Delete Knowledge Base Entry
     *
     * Delete a knowledge base entry.
     */
    public static delete_kb_entry<ThrowOnError extends boolean = false>(options: Options<DeleteKbEntryData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteKbEntryResponses, DeleteKbEntryErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/knowledge-base/entries/{entry_id}',
            ...options
        });
    }
    
    /**
     * Get Knowledge Base Entry
     *
     * Get a specific knowledge base entry.
     */
    public static get_kb_entry<ThrowOnError extends boolean = false>(options: Options<GetKbEntryData, ThrowOnError>) {
        return (options.client ?? client).get<GetKbEntryResponses, GetKbEntryErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/knowledge-base/entries/{entry_id}',
            ...options
        });
    }
    
    /**
     * Update Knowledge Base Entry
     *
     * Update a knowledge base entry (summary only).
     */
    public static update_kb_entry<ThrowOnError extends boolean = false>(options: Options<UpdateKbEntryData, ThrowOnError>) {
        return (options.client ?? client).patch<UpdateKbEntryResponses, UpdateKbEntryErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/knowledge-base/entries/{entry_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Download Knowledge Base Entry
     *
     * Download a knowledge base entry file.
     */
    public static download_kb_entry<ThrowOnError extends boolean = false>(options: Options<DownloadKbEntryData, ThrowOnError>) {
        return (options.client ?? client).get<DownloadKbEntryResponses, DownloadKbEntryErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/knowledge-base/entries/{entry_id}/download',
            ...options
        });
    }
    
    /**
     * Get Knowledge Base Entry Content
     *
     * Get knowledge base entry file content.
     */
    public static get_kb_entry_content<ThrowOnError extends boolean = false>(options: Options<GetKbEntryContentData, ThrowOnError>) {
        return (options.client ?? client).get<GetKbEntryContentResponses, GetKbEntryContentErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/knowledge-base/entries/{entry_id}/content',
            ...options
        });
    }
    
    /**
     * Move Entry to Another Folder
     *
     * Move a file to a different folder.
     */
    public static move_kb_entry<ThrowOnError extends boolean = false>(options: Options<MoveKbEntryData, ThrowOnError>) {
        return (options.client ?? client).put<MoveKbEntryResponses, MoveKbEntryErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/knowledge-base/entries/{entry_id}/move',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Get Agent Knowledge Assignments
     *
     * Get knowledge base assignments for an agent.
     */
    public static get_agent_kb_assignments<ThrowOnError extends boolean = false>(options: Options<GetAgentKbAssignmentsData, ThrowOnError>) {
        return (options.client ?? client).get<GetAgentKbAssignmentsResponses, GetAgentKbAssignmentsErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/knowledge-base/agents/{agent_id}/assignments',
            ...options
        });
    }
    
    /**
     * Update Agent Knowledge Assignments
     *
     * Update knowledge base assignments for an agent.
     */
    public static update_agent_kb_assignments<ThrowOnError extends boolean = false>(options: Options<UpdateAgentKbAssignmentsData, ThrowOnError>) {
        return (options.client ?? client).post<UpdateAgentKbAssignmentsResponses, UpdateAgentKbAssignmentsErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/knowledge-base/agents/{agent_id}/assignments',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Get Knowledge Base Statistics
     *
     * Get knowledge base statistics for the current user.
     */
    public static get_kb_stats<ThrowOnError extends boolean = false>(options?: Options<GetKbStatsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetKbStatsResponses, unknown, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/knowledge-base/stats',
            ...options
        });
    }
}

export class BillingService {
    /**
     * Get Credit Balance
     *
     * Get the current credit balance for the authenticated user.
     */
    public static get_credit_balance<ThrowOnError extends boolean = false>(options?: Options<GetCreditBalanceData, ThrowOnError>) {
        return (options?.client ?? client).get<GetCreditBalanceResponses, unknown, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/billing/balance',
            ...options
        });
    }
    
    /**
     * Get Account Summary
     *
     * Get a detailed summary of the user's credit account.
     */
    public static get_account_summary<ThrowOnError extends boolean = false>(options?: Options<GetAccountSummaryData, ThrowOnError>) {
        return (options?.client ?? client).get<GetAccountSummaryResponses, unknown, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/billing/summary',
            ...options
        });
    }
    
    /**
     * Get Transaction History
     *
     * Get transaction history for the authenticated user.
     */
    public static get_transactions<ThrowOnError extends boolean = false>(options?: Options<GetTransactionsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTransactionsResponses, GetTransactionsErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/billing/transactions',
            ...options
        });
    }
    
    /**
     * Add Credits (Admin)
     *
     * Add credits to the current user's account.
     *
     * Note: In a production system, this would be restricted to admin users only.
     * For now, users can add credits to their own account for testing.
     */
    public static add_credits<ThrowOnError extends boolean = false>(options: Options<AddCreditsData, ThrowOnError>) {
        return (options.client ?? client).post<AddCreditsResponses, AddCreditsErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/billing/credits/add',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Get Available AI Models
     *
     * Get list of available AI models with pricing information.
     */
    public static get_available_models<ThrowOnError extends boolean = false>(options?: Options<GetAvailableModelsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetAvailableModelsResponses, unknown, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/billing/available-models',
            ...options
        });
    }
}

export class DemoTasksService {
    /**
     * Start Demo Educational Task
     *
     * Start a demo educational AI processing task in the background.
     *
     * This endpoint follows the agent_runs pattern:
     * 1. User and project validation
     * 2. Creates Thread and AgentRun records for tracking
     * 3. Registers in Redis for distributed tracking
     * 4. Triggers background task with dramatiq
     * 5. Returns run information for monitoring
     *
     * Args:
     * project_id: The project ID for context
     * task_name: Optional name for the demo task
     *
     * Returns:
     * Task information and status
     */
    public static start_demo_educational_task<ThrowOnError extends boolean = false>(options: Options<StartDemoEducationalTaskData, ThrowOnError>) {
        return (options.client ?? client).post<StartDemoEducationalTaskResponses, StartDemoEducationalTaskErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/demo/start',
            ...options
        });
    }
}

export class RagQueryService {
    /**
     * Create Vector Store for RAG
     *
     * Create a new vector store for RAG operations.
     */
    public static create_vector_store_for_rag<ThrowOnError extends boolean = false>(options: Options<CreateVectorStoreForRagData, ThrowOnError>) {
        return (options.client ?? client).post<CreateVectorStoreForRagResponses, CreateVectorStoreForRagErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/edu-ai/vector-store/create',
            ...options
        });
    }
    
    /**
     * Add Knowledge Base Entry to Vector Store
     *
     * Add a knowledge base entry to vector store.
     */
    public static add_kb_entry_to_vector_store<ThrowOnError extends boolean = false>(options: Options<AddKbEntryToVectorStoreData, ThrowOnError>) {
        return (options.client ?? client).post<AddKbEntryToVectorStoreResponses, AddKbEntryToVectorStoreErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/edu-ai/vector-store/{vector_store_id}/add-kb-entry',
            ...options
        });
    }
    
    /**
     * Add All KB Files from Folder
     *
     * Bulk process all files in a knowledge base folder.
     */
    public static add_kb_folder_to_vector_store<ThrowOnError extends boolean = false>(options: Options<AddKbFolderToVectorStoreData, ThrowOnError>) {
        return (options.client ?? client).post<AddKbFolderToVectorStoreResponses, AddKbFolderToVectorStoreErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/edu-ai/vector-store/{vector_store_id}/add-kb-folder',
            ...options
        });
    }
    
    /**
     * Get Vector Store Statistics
     *
     * Get statistics for a vector store.
     */
    public static get_vector_store_stats<ThrowOnError extends boolean = false>(options: Options<GetVectorStoreStatsData, ThrowOnError>) {
        return (options.client ?? client).get<GetVectorStoreStatsResponses, GetVectorStoreStatsErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/edu-ai/vector-store/{vector_store_id}/stats',
            ...options
        });
    }
}
