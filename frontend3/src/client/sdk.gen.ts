// This file is auto-generated by @hey-api/openapi-ts

import { type Client, type Options as Options2, type TDataShape, urlSearchParamsBodySerializer } from './client';
import { client } from './client.gen';
import type { UsersCreateUserEndpointData, UsersCreateUserEndpointErrors, UsersCreateUserEndpointResponses, UsersDeleteUserEndpointData, UsersDeleteUserEndpointErrors, UsersDeleteUserEndpointResponses, UsersDeleteUserMeData, UsersDeleteUserMeResponses, UsersLoginAccessTokenData, UsersLoginAccessTokenErrors, UsersLoginAccessTokenResponses, UsersLoginData, UsersLoginErrors, UsersLoginResponses, UsersReadUserByIdData, UsersReadUserByIdErrors, UsersReadUserByIdResponses, UsersReadUserMeData, UsersReadUserMeResponses, UsersReadUsersData, UsersReadUsersErrors, UsersReadUsersResponses, UsersRegisterData, UsersRegisterErrors, UsersRegisterResponses, UsersUpdatePasswordMeData, UsersUpdatePasswordMeErrors, UsersUpdatePasswordMeResponses, UsersUpdateUserEndpointData, UsersUpdateUserEndpointErrors, UsersUpdateUserEndpointResponses, UsersUpdateUserMeData, UsersUpdateUserMeErrors, UsersUpdateUserMeResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export class UsersService {
    /**
     * Login Access Token
     *
     * OAuth2 compatible token login.
     */
    public static users-login_access_token<ThrowOnError extends boolean = false>(options: Options<UsersLoginAccessTokenData, ThrowOnError>) {
        return (options.client ?? client).post<UsersLoginAccessTokenResponses, UsersLoginAccessTokenErrors, ThrowOnError>({
            ...urlSearchParamsBodySerializer,
            responseType: 'json',
            url: '/api/v1/users/login/access-token',
            ...options,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                ...options.headers
            }
        });
    }
    
    /**
     * Login
     *
     * Login with email and password.
     */
    public static users-login<ThrowOnError extends boolean = false>(options: Options<UsersLoginData, ThrowOnError>) {
        return (options.client ?? client).post<UsersLoginResponses, UsersLoginErrors, ThrowOnError>({
            responseType: 'json',
            url: '/api/v1/users/login',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Register
     *
     * Register new user.
     */
    public static users-register<ThrowOnError extends boolean = false>(options: Options<UsersRegisterData, ThrowOnError>) {
        return (options.client ?? client).post<UsersRegisterResponses, UsersRegisterErrors, ThrowOnError>({
            responseType: 'json',
            url: '/api/v1/users/register',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Read Users
     *
     * Get all users (superuser only).
     */
    public static users-read_users<ThrowOnError extends boolean = false>(options?: Options<UsersReadUsersData, ThrowOnError>) {
        return (options?.client ?? client).get<UsersReadUsersResponses, UsersReadUsersErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users',
            ...options
        });
    }
    
    /**
     * Create User Endpoint
     *
     * Create new user (superuser only).
     */
    public static users-create_user_endpoint<ThrowOnError extends boolean = false>(options: Options<UsersCreateUserEndpointData, ThrowOnError>) {
        return (options.client ?? client).post<UsersCreateUserEndpointResponses, UsersCreateUserEndpointErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Delete User Endpoint
     *
     * Delete user (superuser only).
     */
    public static users-delete_user_endpoint<ThrowOnError extends boolean = false>(options: Options<UsersDeleteUserEndpointData, ThrowOnError>) {
        return (options.client ?? client).delete<UsersDeleteUserEndpointResponses, UsersDeleteUserEndpointErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/{user_id}',
            ...options
        });
    }
    
    /**
     * Read User By Id
     *
     * Get user by ID. Own profile or superuser only.
     */
    public static users-read_user_by_id<ThrowOnError extends boolean = false>(options: Options<UsersReadUserByIdData, ThrowOnError>) {
        return (options.client ?? client).get<UsersReadUserByIdResponses, UsersReadUserByIdErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/{user_id}',
            ...options
        });
    }
    
    /**
     * Update User Endpoint
     *
     * Update user (superuser only).
     */
    public static users-update_user_endpoint<ThrowOnError extends boolean = false>(options: Options<UsersUpdateUserEndpointData, ThrowOnError>) {
        return (options.client ?? client).patch<UsersUpdateUserEndpointResponses, UsersUpdateUserEndpointErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/{user_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Read User Me
     *
     * Get current user profile.
     */
    public static users-read_user_me<ThrowOnError extends boolean = false>(options?: Options<UsersReadUserMeData, ThrowOnError>) {
        return (options?.client ?? client).get<UsersReadUserMeResponses, unknown, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/me/profile',
            ...options
        });
    }
    
    /**
     * Update User Me
     *
     * Update current user profile.
     */
    public static users-update_user_me<ThrowOnError extends boolean = false>(options: Options<UsersUpdateUserMeData, ThrowOnError>) {
        return (options.client ?? client).patch<UsersUpdateUserMeResponses, UsersUpdateUserMeErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/me/profile',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Update Password Me
     *
     * Update current user password.
     */
    public static users-update_password_me<ThrowOnError extends boolean = false>(options: Options<UsersUpdatePasswordMeData, ThrowOnError>) {
        return (options.client ?? client).patch<UsersUpdatePasswordMeResponses, UsersUpdatePasswordMeErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/me/password',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Delete User Me
     *
     * Delete current user account.
     */
    public static users-delete_user_me<ThrowOnError extends boolean = false>(options?: Options<UsersDeleteUserMeData, ThrowOnError>) {
        return (options?.client ?? client).delete<UsersDeleteUserMeResponses, unknown, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/me',
            ...options
        });
    }
}

export class AuthService {
    /**
     * Login Access Token
     *
     * OAuth2 compatible token login.
     */
    public static users-login_access_token<ThrowOnError extends boolean = false>(options: Options<UsersLoginAccessTokenData, ThrowOnError>) {
        return (options.client ?? client).post<UsersLoginAccessTokenResponses, UsersLoginAccessTokenErrors, ThrowOnError>({
            ...urlSearchParamsBodySerializer,
            responseType: 'json',
            url: '/api/v1/users/login/access-token',
            ...options,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                ...options.headers
            }
        });
    }
    
    /**
     * Login
     *
     * Login with email and password.
     */
    public static users-login<ThrowOnError extends boolean = false>(options: Options<UsersLoginData, ThrowOnError>) {
        return (options.client ?? client).post<UsersLoginResponses, UsersLoginErrors, ThrowOnError>({
            responseType: 'json',
            url: '/api/v1/users/login',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Register
     *
     * Register new user.
     */
    public static users-register<ThrowOnError extends boolean = false>(options: Options<UsersRegisterData, ThrowOnError>) {
        return (options.client ?? client).post<UsersRegisterResponses, UsersRegisterErrors, ThrowOnError>({
            responseType: 'json',
            url: '/api/v1/users/register',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}
