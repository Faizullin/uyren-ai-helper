// This file is auto-generated by @hey-api/openapi-ts

import { type Client, formDataBodySerializer, type Options as Options2, type TDataShape, urlSearchParamsBodySerializer } from './client';
import { client } from './client.gen';
import type { CreateAgentData, CreateAgentErrors, CreateAgentResponses, CreateKbFolderData, CreateKbFolderErrors, CreateKbFolderResponses, CreateThreadData, CreateThreadErrors, CreateThreadMessageData, CreateThreadMessageErrors, CreateThreadMessageResponses, CreateThreadResponses, CreateUserData, CreateUserErrors, CreateUserResponses, DeleteAgentData, DeleteAgentErrors, DeleteAgentResponses, DeleteCurrentUserAccountData, DeleteCurrentUserAccountResponses, DeleteKbEntryData, DeleteKbEntryErrors, DeleteKbEntryResponses, DeleteKbFolderData, DeleteKbFolderErrors, DeleteKbFolderResponses, DeleteThreadData, DeleteThreadErrors, DeleteThreadMessageData, DeleteThreadMessageErrors, DeleteThreadMessageResponses, DeleteThreadResponses, DeleteUserData, DeleteUserErrors, DeleteUserResponses, DownloadKbEntryData, DownloadKbEntryErrors, DownloadKbEntryResponses, GenerateAgentIconData, GenerateAgentIconErrors, GenerateAgentIconResponses, GetAgentData, GetAgentErrors, GetAgentKbAssignmentsData, GetAgentKbAssignmentsErrors, GetAgentKbAssignmentsResponses, GetAgentResponses, GetAgentRunStatusData, GetAgentRunStatusErrors, GetAgentRunStatusResponses, GetCurrentUserProfileData, GetCurrentUserProfileResponses, GetKbEntryData, GetKbEntryErrors, GetKbEntryResponses, GetKbFolderData, GetKbFolderErrors, GetKbFolderResponses, GetKbStatsData, GetKbStatsResponses, GetThreadData, GetThreadErrors, GetThreadMessageData, GetThreadMessageErrors, GetThreadMessageResponses, GetThreadMessagesData, GetThreadMessagesErrors, GetThreadMessagesResponses, GetThreadResponses, GetUserByIdData, GetUserByIdErrors, GetUserByIdResponses, InitiateAgentSessionData, InitiateAgentSessionErrors, InitiateAgentSessionResponses, ListActiveAgentRunsData, ListActiveAgentRunsErrors, ListActiveAgentRunsResponses, ListAgentsData, ListAgentsErrors, ListAgentsResponses, ListFolderEntriesData, ListFolderEntriesErrors, ListFolderEntriesResponses, ListKbFoldersData, ListKbFoldersErrors, ListKbFoldersResponses, ListThreadAgentRunsData, ListThreadAgentRunsErrors, ListThreadAgentRunsResponses, ListUsersData, ListUsersErrors, ListUsersResponses, ListUserThreadsData, ListUserThreadsErrors, ListUserThreadsResponses, LoginAccessTokenData, LoginAccessTokenErrors, LoginAccessTokenResponses, LoginData, LoginErrors, LoginResponses, MoveKbEntryData, MoveKbEntryErrors, MoveKbEntryResponses, RegisterData, RegisterErrors, RegisterResponses, RetryAgentRunData, RetryAgentRunErrors, RetryAgentRunResponses, StartAgentRunData, StartAgentRunErrors, StartAgentRunResponses, StopAgentRunData, StopAgentRunErrors, StopAgentRunResponses, UpdateAgentData, UpdateAgentErrors, UpdateAgentKbAssignmentsData, UpdateAgentKbAssignmentsErrors, UpdateAgentKbAssignmentsResponses, UpdateAgentResponses, UpdateCurrentUserPasswordData, UpdateCurrentUserPasswordErrors, UpdateCurrentUserPasswordResponses, UpdateCurrentUserProfileData, UpdateCurrentUserProfileErrors, UpdateCurrentUserProfileResponses, UpdateKbEntryData, UpdateKbEntryErrors, UpdateKbEntryResponses, UpdateKbFolderData, UpdateKbFolderErrors, UpdateKbFolderResponses, UpdateThreadData, UpdateThreadErrors, UpdateThreadMessageData, UpdateThreadMessageErrors, UpdateThreadMessageResponses, UpdateThreadResponses, UpdateUserData, UpdateUserErrors, UpdateUserResponses, UploadFileToFolderData, UploadFileToFolderErrors, UploadFileToFolderResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export class UsersService {
    /**
     * Login with Access Token
     *
     * OAuth2 compatible token login.
     */
    public static login_access_token<ThrowOnError extends boolean = false>(options: Options<LoginAccessTokenData, ThrowOnError>) {
        return (options.client ?? client).post<LoginAccessTokenResponses, LoginAccessTokenErrors, ThrowOnError>({
            ...urlSearchParamsBodySerializer,
            responseType: 'json',
            url: '/api/v1/users/login/access-token',
            ...options,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                ...options.headers
            }
        });
    }
    
    /**
     * Login User
     *
     * Login with email and password.
     */
    public static login<ThrowOnError extends boolean = false>(options: Options<LoginData, ThrowOnError>) {
        return (options.client ?? client).post<LoginResponses, LoginErrors, ThrowOnError>({
            responseType: 'json',
            url: '/api/v1/users/login',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Register User
     *
     * Register new user.
     */
    public static register<ThrowOnError extends boolean = false>(options: Options<RegisterData, ThrowOnError>) {
        return (options.client ?? client).post<RegisterResponses, RegisterErrors, ThrowOnError>({
            responseType: 'json',
            url: '/api/v1/users/register',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * List Users
     *
     * Get all users (superuser only).
     */
    public static list_users<ThrowOnError extends boolean = false>(options?: Options<ListUsersData, ThrowOnError>) {
        return (options?.client ?? client).get<ListUsersResponses, ListUsersErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users',
            ...options
        });
    }
    
    /**
     * Create User
     *
     * Create new user (superuser only).
     */
    public static create_user<ThrowOnError extends boolean = false>(options: Options<CreateUserData, ThrowOnError>) {
        return (options.client ?? client).post<CreateUserResponses, CreateUserErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Delete User
     *
     * Delete user (superuser only).
     */
    public static delete_user<ThrowOnError extends boolean = false>(options: Options<DeleteUserData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteUserResponses, DeleteUserErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/{user_id}',
            ...options
        });
    }
    
    /**
     * Get User by ID
     *
     * Get user by ID. Own profile or superuser only.
     */
    public static get_user_by_id<ThrowOnError extends boolean = false>(options: Options<GetUserByIdData, ThrowOnError>) {
        return (options.client ?? client).get<GetUserByIdResponses, GetUserByIdErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/{user_id}',
            ...options
        });
    }
    
    /**
     * Update User
     *
     * Update user (superuser only).
     */
    public static update_user<ThrowOnError extends boolean = false>(options: Options<UpdateUserData, ThrowOnError>) {
        return (options.client ?? client).patch<UpdateUserResponses, UpdateUserErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/{user_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Get Current User Profile
     *
     * Get current user profile.
     */
    public static get_current_user_profile<ThrowOnError extends boolean = false>(options?: Options<GetCurrentUserProfileData, ThrowOnError>) {
        return (options?.client ?? client).get<GetCurrentUserProfileResponses, unknown, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/me/profile',
            ...options
        });
    }
    
    /**
     * Update Current User Profile
     *
     * Update current user profile.
     */
    public static update_current_user_profile<ThrowOnError extends boolean = false>(options: Options<UpdateCurrentUserProfileData, ThrowOnError>) {
        return (options.client ?? client).patch<UpdateCurrentUserProfileResponses, UpdateCurrentUserProfileErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/me/profile',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Update Current User Password
     *
     * Update current user password.
     */
    public static update_current_user_password<ThrowOnError extends boolean = false>(options: Options<UpdateCurrentUserPasswordData, ThrowOnError>) {
        return (options.client ?? client).patch<UpdateCurrentUserPasswordResponses, UpdateCurrentUserPasswordErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/me/password',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Delete Current User Account
     *
     * Delete current user account.
     */
    public static delete_current_user_account<ThrowOnError extends boolean = false>(options?: Options<DeleteCurrentUserAccountData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteCurrentUserAccountResponses, unknown, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/me',
            ...options
        });
    }
}

export class AuthService {
    /**
     * Login with Access Token
     *
     * OAuth2 compatible token login.
     */
    public static login_access_token<ThrowOnError extends boolean = false>(options: Options<LoginAccessTokenData, ThrowOnError>) {
        return (options.client ?? client).post<LoginAccessTokenResponses, LoginAccessTokenErrors, ThrowOnError>({
            ...urlSearchParamsBodySerializer,
            responseType: 'json',
            url: '/api/v1/users/login/access-token',
            ...options,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                ...options.headers
            }
        });
    }
    
    /**
     * Login User
     *
     * Login with email and password.
     */
    public static login<ThrowOnError extends boolean = false>(options: Options<LoginData, ThrowOnError>) {
        return (options.client ?? client).post<LoginResponses, LoginErrors, ThrowOnError>({
            responseType: 'json',
            url: '/api/v1/users/login',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Register User
     *
     * Register new user.
     */
    public static register<ThrowOnError extends boolean = false>(options: Options<RegisterData, ThrowOnError>) {
        return (options.client ?? client).post<RegisterResponses, RegisterErrors, ThrowOnError>({
            responseType: 'json',
            url: '/api/v1/users/register',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class ThreadsService {
    /**
     * List User Threads
     *
     * Get all threads for current user with pagination.
     */
    public static list_user_threads<ThrowOnError extends boolean = false>(options?: Options<ListUserThreadsData, ThrowOnError>) {
        return (options?.client ?? client).get<ListUserThreadsResponses, ListUserThreadsErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/threads',
            ...options
        });
    }
    
    /**
     * Create Thread
     *
     * Create new thread.
     */
    public static create_thread<ThrowOnError extends boolean = false>(options: Options<CreateThreadData, ThrowOnError>) {
        return (options.client ?? client).post<CreateThreadResponses, CreateThreadErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/threads',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Delete Thread
     *
     * Delete thread and all associated messages.
     */
    public static delete_thread<ThrowOnError extends boolean = false>(options: Options<DeleteThreadData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteThreadResponses, DeleteThreadErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/threads/{thread_id}',
            ...options
        });
    }
    
    /**
     * Get Thread
     *
     * Get a specific thread by ID.
     */
    public static get_thread<ThrowOnError extends boolean = false>(options: Options<GetThreadData, ThrowOnError>) {
        return (options.client ?? client).get<GetThreadResponses, GetThreadErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/threads/{thread_id}',
            ...options
        });
    }
    
    /**
     * Update Thread
     *
     * Update thread.
     */
    public static update_thread<ThrowOnError extends boolean = false>(options: Options<UpdateThreadData, ThrowOnError>) {
        return (options.client ?? client).patch<UpdateThreadResponses, UpdateThreadErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/threads/{thread_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Get Thread Messages
     *
     * Get all messages for a thread with pagination.
     */
    public static get_thread_messages<ThrowOnError extends boolean = false>(options: Options<GetThreadMessagesData, ThrowOnError>) {
        return (options.client ?? client).get<GetThreadMessagesResponses, GetThreadMessagesErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/threads/{thread_id}/messages',
            ...options
        });
    }
    
    /**
     * Create Message
     *
     * Create new message in a thread.
     */
    public static create_thread_message<ThrowOnError extends boolean = false>(options: Options<CreateThreadMessageData, ThrowOnError>) {
        return (options.client ?? client).post<CreateThreadMessageResponses, CreateThreadMessageErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/threads/{thread_id}/messages',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Delete Message
     *
     * Delete message from thread.
     */
    public static delete_thread_message<ThrowOnError extends boolean = false>(options: Options<DeleteThreadMessageData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteThreadMessageResponses, DeleteThreadMessageErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/threads/{thread_id}/messages/{message_id}',
            ...options
        });
    }
    
    /**
     * Get Message
     *
     * Get specific message by ID.
     */
    public static get_thread_message<ThrowOnError extends boolean = false>(options: Options<GetThreadMessageData, ThrowOnError>) {
        return (options.client ?? client).get<GetThreadMessageResponses, GetThreadMessageErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/threads/{thread_id}/messages/{message_id}',
            ...options
        });
    }
    
    /**
     * Update Message
     *
     * Update message.
     */
    public static update_thread_message<ThrowOnError extends boolean = false>(options: Options<UpdateThreadMessageData, ThrowOnError>) {
        return (options.client ?? client).patch<UpdateThreadMessageResponses, UpdateThreadMessageErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/threads/{thread_id}/messages/{message_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class AgentsService {
    /**
     * List agents with pagination, search, and filtering
     *
     * List agents with pagination, search, and filtering.
     */
    public static list_agents<ThrowOnError extends boolean = false>(options?: Options<ListAgentsData, ThrowOnError>) {
        return (options?.client ?? client).get<ListAgentsResponses, ListAgentsErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/agents',
            ...options
        });
    }
    
    /**
     * Create Agent
     *
     * Create a new agent.
     */
    public static create_agent<ThrowOnError extends boolean = false>(options: Options<CreateAgentData, ThrowOnError>) {
        return (options.client ?? client).post<CreateAgentResponses, CreateAgentErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/agents',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Delete agent
     *
     * Delete an agent.
     */
    public static delete_agent<ThrowOnError extends boolean = false>(options: Options<DeleteAgentData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteAgentResponses, DeleteAgentErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/agents/{agent_id}',
            ...options
        });
    }
    
    /**
     * Get agent details
     *
     * Get a single agent with full configuration.
     */
    public static get_agent<ThrowOnError extends boolean = false>(options: Options<GetAgentData, ThrowOnError>) {
        return (options.client ?? client).get<GetAgentResponses, GetAgentErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/agents/{agent_id}',
            ...options
        });
    }
    
    /**
     * Update agent
     *
     * Update an agent.
     */
    public static update_agent<ThrowOnError extends boolean = false>(options: Options<UpdateAgentData, ThrowOnError>) {
        return (options.client ?? client).put<UpdateAgentResponses, UpdateAgentErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/agents/{agent_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Generate Agent Icon
     *
     * Generate an appropriate icon and colors for an agent based on its name.
     */
    public static generate_agent_icon<ThrowOnError extends boolean = false>(options: Options<GenerateAgentIconData, ThrowOnError>) {
        return (options.client ?? client).post<GenerateAgentIconResponses, GenerateAgentIconErrors, ThrowOnError>({
            responseType: 'json',
            url: '/api/v1/agents/generate-icon',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class AgentRunsService {
    /**
     * Start Agent Run
     *
     * Start an agent for a specific thread in the background.
     *
     * This endpoint:
     * 1. Loads the thread and verifies access
     * 2. Loads the specified agent (or default agent if not specified)
     * 3. Creates an agent run record
     * 4. Triggers background agent execution
     */
    public static start_agent_run<ThrowOnError extends boolean = false>(options: Options<StartAgentRunData, ThrowOnError>) {
        return (options.client ?? client).post<StartAgentRunResponses, StartAgentRunErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/threads/{thread_id}/agent/start',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Initiate Agent Session
     *
     * Initiate a new agent session with optional file attachments.
     *
     * This endpoint:
     * 1. Loads the specified agent (or default agent if not specified)
     * 2. Creates a new thread for the conversation
     * 3. Adds the initial user message to the thread
     * 4. Creates an agent run record
     * 5. Optionally handles file uploads (stored as metadata)
     */
    public static initiate_agent_session<ThrowOnError extends boolean = false>(options: Options<InitiateAgentSessionData, ThrowOnError>) {
        return (options.client ?? client).post<InitiateAgentSessionResponses, InitiateAgentSessionErrors, ThrowOnError>({
            ...formDataBodySerializer,
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/agent/initiate',
            ...options,
            headers: {
                'Content-Type': null,
                ...options.headers
            }
        });
    }
    
    /**
     * List Active Agent Runs
     *
     * Get all active (running) agent runs for the current user.
     */
    public static list_active_agent_runs<ThrowOnError extends boolean = false>(options?: Options<ListActiveAgentRunsData, ThrowOnError>) {
        return (options?.client ?? client).get<ListActiveAgentRunsResponses, ListActiveAgentRunsErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/agent-runs/active',
            ...options
        });
    }
    
    /**
     * List Thread Agent Runs
     *
     * Get all agent runs for a specific thread.
     */
    public static list_thread_agent_runs<ThrowOnError extends boolean = false>(options: Options<ListThreadAgentRunsData, ThrowOnError>) {
        return (options.client ?? client).get<ListThreadAgentRunsResponses, ListThreadAgentRunsErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/threads/{thread_id}/agent-runs',
            ...options
        });
    }
    
    /**
     * Get Agent Run Status
     *
     * Get the status and details of an agent run.
     */
    public static get_agent_run_status<ThrowOnError extends boolean = false>(options: Options<GetAgentRunStatusData, ThrowOnError>) {
        return (options.client ?? client).get<GetAgentRunStatusResponses, GetAgentRunStatusErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/agent-runs/{agent_run_id}',
            ...options
        });
    }
    
    /**
     * Stop Agent Run
     *
     * Stop a running agent run.
     *
     * Only the thread owner or superuser can stop an agent run.
     */
    public static stop_agent_run<ThrowOnError extends boolean = false>(options: Options<StopAgentRunData, ThrowOnError>) {
        return (options.client ?? client).post<StopAgentRunResponses, StopAgentRunErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/agent-runs/{agent_run_id}/stop',
            ...options
        });
    }
    
    /**
     * Retry Failed Agent Run
     *
     * Retry a failed agent run.
     *
     * Only the thread owner or superuser can retry an agent run.
     * Only failed or cancelled runs can be retried.
     */
    public static retry_agent_run<ThrowOnError extends boolean = false>(options: Options<RetryAgentRunData, ThrowOnError>) {
        return (options.client ?? client).post<RetryAgentRunResponses, RetryAgentRunErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/agent-runs/{agent_run_id}/retry',
            ...options
        });
    }
}

export class KnowledgeBaseService {
    /**
     * List Knowledge Base Folders
     *
     * Get all knowledge base folders for the current user.
     */
    public static list_kb_folders<ThrowOnError extends boolean = false>(options?: Options<ListKbFoldersData, ThrowOnError>) {
        return (options?.client ?? client).get<ListKbFoldersResponses, ListKbFoldersErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/knowledge-base/folders',
            ...options
        });
    }
    
    /**
     * Create Knowledge Base Folder
     *
     * Create a new knowledge base folder.
     */
    public static create_kb_folder<ThrowOnError extends boolean = false>(options: Options<CreateKbFolderData, ThrowOnError>) {
        return (options.client ?? client).post<CreateKbFolderResponses, CreateKbFolderErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/knowledge-base/folders',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Delete Knowledge Base Folder
     *
     * Delete a knowledge base folder and all its entries.
     */
    public static delete_kb_folder<ThrowOnError extends boolean = false>(options: Options<DeleteKbFolderData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteKbFolderResponses, DeleteKbFolderErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/knowledge-base/folders/{folder_id}',
            ...options
        });
    }
    
    /**
     * Get Knowledge Base Folder
     *
     * Get a specific knowledge base folder.
     */
    public static get_kb_folder<ThrowOnError extends boolean = false>(options: Options<GetKbFolderData, ThrowOnError>) {
        return (options.client ?? client).get<GetKbFolderResponses, GetKbFolderErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/knowledge-base/folders/{folder_id}',
            ...options
        });
    }
    
    /**
     * Update Knowledge Base Folder
     *
     * Update a knowledge base folder.
     */
    public static update_kb_folder<ThrowOnError extends boolean = false>(options: Options<UpdateKbFolderData, ThrowOnError>) {
        return (options.client ?? client).put<UpdateKbFolderResponses, UpdateKbFolderErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/knowledge-base/folders/{folder_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * List Folder Entries
     *
     * Get all entries in a folder.
     */
    public static list_folder_entries<ThrowOnError extends boolean = false>(options: Options<ListFolderEntriesData, ThrowOnError>) {
        return (options.client ?? client).get<ListFolderEntriesResponses, ListFolderEntriesErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/knowledge-base/folders/{folder_id}/entries',
            ...options
        });
    }
    
    /**
     * Upload File to Folder
     *
     * Upload a file to a knowledge base folder.
     */
    public static upload_file_to_folder<ThrowOnError extends boolean = false>(options: Options<UploadFileToFolderData, ThrowOnError>) {
        return (options.client ?? client).post<UploadFileToFolderResponses, UploadFileToFolderErrors, ThrowOnError>({
            ...formDataBodySerializer,
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/knowledge-base/folders/{folder_id}/upload',
            ...options,
            headers: {
                'Content-Type': null,
                ...options.headers
            }
        });
    }
    
    /**
     * Delete Knowledge Base Entry
     *
     * Delete a knowledge base entry.
     */
    public static delete_kb_entry<ThrowOnError extends boolean = false>(options: Options<DeleteKbEntryData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteKbEntryResponses, DeleteKbEntryErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/knowledge-base/entries/{entry_id}',
            ...options
        });
    }
    
    /**
     * Get Knowledge Base Entry
     *
     * Get a specific knowledge base entry.
     */
    public static get_kb_entry<ThrowOnError extends boolean = false>(options: Options<GetKbEntryData, ThrowOnError>) {
        return (options.client ?? client).get<GetKbEntryResponses, GetKbEntryErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/knowledge-base/entries/{entry_id}',
            ...options
        });
    }
    
    /**
     * Update Knowledge Base Entry
     *
     * Update a knowledge base entry (summary only).
     */
    public static update_kb_entry<ThrowOnError extends boolean = false>(options: Options<UpdateKbEntryData, ThrowOnError>) {
        return (options.client ?? client).patch<UpdateKbEntryResponses, UpdateKbEntryErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/knowledge-base/entries/{entry_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Download Knowledge Base Entry
     *
     * Download a knowledge base entry file.
     */
    public static download_kb_entry<ThrowOnError extends boolean = false>(options: Options<DownloadKbEntryData, ThrowOnError>) {
        return (options.client ?? client).get<DownloadKbEntryResponses, DownloadKbEntryErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/knowledge-base/entries/{entry_id}/download',
            ...options
        });
    }
    
    /**
     * Move Entry to Another Folder
     *
     * Move a file to a different folder.
     */
    public static move_kb_entry<ThrowOnError extends boolean = false>(options: Options<MoveKbEntryData, ThrowOnError>) {
        return (options.client ?? client).put<MoveKbEntryResponses, MoveKbEntryErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/knowledge-base/entries/{entry_id}/move',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Get Agent Knowledge Assignments
     *
     * Get knowledge base assignments for an agent.
     */
    public static get_agent_kb_assignments<ThrowOnError extends boolean = false>(options: Options<GetAgentKbAssignmentsData, ThrowOnError>) {
        return (options.client ?? client).get<GetAgentKbAssignmentsResponses, GetAgentKbAssignmentsErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/knowledge-base/agents/{agent_id}/assignments',
            ...options
        });
    }
    
    /**
     * Update Agent Knowledge Assignments
     *
     * Update knowledge base assignments for an agent.
     */
    public static update_agent_kb_assignments<ThrowOnError extends boolean = false>(options: Options<UpdateAgentKbAssignmentsData, ThrowOnError>) {
        return (options.client ?? client).post<UpdateAgentKbAssignmentsResponses, UpdateAgentKbAssignmentsErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/knowledge-base/agents/{agent_id}/assignments',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Get Knowledge Base Statistics
     *
     * Get knowledge base statistics for the current user.
     */
    public static get_kb_stats<ThrowOnError extends boolean = false>(options?: Options<GetKbStatsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetKbStatsResponses, unknown, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/knowledge-base/stats',
            ...options
        });
    }
}
