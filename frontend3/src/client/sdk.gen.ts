// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { StartAgentRunData, StartAgentRunResponse, InitiateAgentSessionData, InitiateAgentSessionResponse, ListActiveAgentRunsResponse, ListThreadAgentRunsData, ListThreadAgentRunsResponse, GetAgentRunStatusData, GetAgentRunStatusResponse, StopAgentRunData, StopAgentRunResponse, RetryAgentRunData, RetryAgentRunResponse, AgentsGetAgentsData, AgentsGetAgentsResponse, AgentsCreateAgentData, AgentsCreateAgentResponse, AgentsGetAgentData, AgentsGetAgentResponse, AgentsUpdateAgentData, AgentsUpdateAgentResponse, AgentsDeleteAgentData, AgentsDeleteAgentResponse, UsersLoginAccessTokenData, UsersLoginAccessTokenResponse, UsersLoginData, UsersLoginResponse, UsersRegisterData, UsersRegisterResponse, StartAutoGradingData, StartAutoGradingResponse, GetGradingStatusData, GetGradingStatusResponse, ReviewGradeData, ReviewGradeResponse, CreateAssignmentData, CreateAssignmentResponse, UploadCourseMaterialData, UploadCourseMaterialResponse, ListUserThreadsData, ListUserThreadsResponse, CreateThreadData, CreateThreadResponse, GetThreadData, GetThreadResponse, ThreadsUpdateThreadEndpointData, ThreadsUpdateThreadEndpointResponse, ThreadsDeleteThreadEndpointData, ThreadsDeleteThreadEndpointResponse, GetThreadMessagesData, GetThreadMessagesResponse, CreateThreadMessageData, CreateThreadMessageResponse, ThreadsReadMessageData, ThreadsReadMessageResponse, ThreadsUpdateMessageEndpointData, ThreadsUpdateMessageEndpointResponse, ThreadsDeleteMessageEndpointData, ThreadsDeleteMessageEndpointResponse, UsersReadUsersData, UsersReadUsersResponse, UsersCreateUserEndpointData, UsersCreateUserEndpointResponse, UsersReadUserByIdData, UsersReadUserByIdResponse, UsersUpdateUserEndpointData, UsersUpdateUserEndpointResponse, UsersDeleteUserEndpointData, UsersDeleteUserEndpointResponse, UsersReadUserMeResponse, UsersUpdateUserMeData, UsersUpdateUserMeResponse, UsersUpdatePasswordMeData, UsersUpdatePasswordMeResponse, UsersDeleteUserMeResponse } from './types.gen';

export class AgentRunsService {
    /**
     * Start Agent Run
     * Start an agent for a specific thread in the background.
     *
     * This endpoint:
     * 1. Loads the thread and verifies access
     * 2. Loads the specified agent (or default agent if not specified)
     * 3. Creates an agent run record
     * 4. Triggers background agent execution
     * @param data The data for the request.
     * @param data.threadId
     * @param data.requestBody
     * @returns AgentStartResponse Successful Response
     * @throws ApiError
     */
    public static startAgentRun(data: StartAgentRunData): CancelablePromise<StartAgentRunResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/threads/{thread_id}/agent/start',
            path: {
                thread_id: data.threadId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Initiate Agent Session
     * Initiate a new agent session with optional file attachments.
     *
     * This endpoint:
     * 1. Loads the specified agent (or default agent if not specified)
     * 2. Creates a new thread for the conversation
     * 3. Adds the initial user message to the thread
     * 4. Creates an agent run record
     * 5. Optionally handles file uploads (stored as metadata)
     * @param data The data for the request.
     * @param data.formData
     * @returns InitiateAgentResponse Successful Response
     * @throws ApiError
     */
    public static initiateAgentSession(data: InitiateAgentSessionData): CancelablePromise<InitiateAgentSessionResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/agent/initiate',
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List Active Agent Runs
     * Get all active (running) agent runs for the current user.
     *
     * Returns agent runs across all threads owned by the user.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static listActiveAgentRuns(): CancelablePromise<ListActiveAgentRunsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/agent-runs/active'
        });
    }
    
    /**
     * List Thread Agent Runs
     * Get all agent runs for a specific thread.
     * @param data The data for the request.
     * @param data.threadId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static listThreadAgentRuns(data: ListThreadAgentRunsData): CancelablePromise<ListThreadAgentRunsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/threads/{thread_id}/agent-runs',
            path: {
                thread_id: data.threadId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Agent Run Status
     * Get the status and details of an agent run.
     * @param data The data for the request.
     * @param data.agentRunId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getAgentRunStatus(data: GetAgentRunStatusData): CancelablePromise<GetAgentRunStatusResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/agent-runs/{agent_run_id}',
            path: {
                agent_run_id: data.agentRunId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Stop Agent Run
     * Stop a running agent run.
     *
     * Only the thread owner or superuser can stop an agent run.
     * @param data The data for the request.
     * @param data.agentRunId
     * @returns string Successful Response
     * @throws ApiError
     */
    public static stopAgentRun(data: StopAgentRunData): CancelablePromise<StopAgentRunResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/agent-runs/{agent_run_id}/stop',
            path: {
                agent_run_id: data.agentRunId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Retry Failed Agent Run
     * Retry a failed agent run.
     *
     * Only the thread owner or superuser can retry an agent run.
     * Only failed or cancelled runs can be retried.
     * @param data The data for the request.
     * @param data.agentRunId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static retryAgentRun(data: RetryAgentRunData): CancelablePromise<RetryAgentRunResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/agent-runs/{agent_run_id}/retry',
            path: {
                agent_run_id: data.agentRunId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class AgentsService {
    /**
     * Get Agents
     * List agents with pagination and filters.
     *
     * Users see their own agents + public agents.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @param data.search
     * @param data.isDefault
     * @param data.isPublic
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getAgents(data: AgentsGetAgentsData = {}): CancelablePromise<AgentsGetAgentsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/agents',
            query: {
                skip: data.skip,
                limit: data.limit,
                search: data.search,
                is_default: data.isDefault,
                is_public: data.isPublic
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Agent
     * Create a new agent.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static createAgent(data: AgentsCreateAgentData): CancelablePromise<AgentsCreateAgentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/agents',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Agent
     * Get a single agent with full configuration.
     * @param data The data for the request.
     * @param data.agentId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getAgent(data: AgentsGetAgentData): CancelablePromise<AgentsGetAgentResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/agents/{agent_id}',
            path: {
                agent_id: data.agentId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Agent
     * Update an agent.
     * @param data The data for the request.
     * @param data.agentId
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static updateAgent(data: AgentsUpdateAgentData): CancelablePromise<AgentsUpdateAgentResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/agents/{agent_id}',
            path: {
                agent_id: data.agentId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Agent
     * Delete an agent.
     * @param data The data for the request.
     * @param data.agentId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteAgent(data: AgentsDeleteAgentData): CancelablePromise<AgentsDeleteAgentResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/agents/{agent_id}',
            path: {
                agent_id: data.agentId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class AuthService {
    /**
     * Login Access Token
     * OAuth2 compatible token login.
     * @param data The data for the request.
     * @param data.formData
     * @returns LoginResponse Successful Response
     * @throws ApiError
     */
    public static usersLoginAccessToken(data: UsersLoginAccessTokenData): CancelablePromise<UsersLoginAccessTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/login/access-token',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Login
     * Login with email and password.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns LoginResponse Successful Response
     * @throws ApiError
     */
    public static usersLogin(data: UsersLoginData): CancelablePromise<UsersLoginResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/login',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Register
     * Register new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns RegisterResponse Successful Response
     * @throws ApiError
     */
    public static usersRegister(data: UsersRegisterData): CancelablePromise<UsersRegisterResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/register',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class GradingService {
    /**
     * Start Auto-Grading
     * Start auto-grading workflow for an assignment
     *
     * **This is the SINGLE route that does everything:**
     *
     * 1. **Fetches submissions** from third-party API (configured in assignment)
     * 2. **Creates grading sessions** for each submission (dynamic JSONB storage)
     * 3. **Starts LangGraph workflow** for each submission (in parallel):
     * - Fetch assignment data
     * - Retrieve RAG context (if enabled)
     * - AI analysis of submission
     * - Calculate grade based on rubric
     * - Generate student feedback
     * - Save results
     * 4. **Returns session IDs** for tracking progress
     *
     * **How it works:**
     *
     * The assignment must be pre-configured with:
     * - `thirdparty_api_url`: Base URL of external API (e.g., "https://api.classroom.com")
     * - `thirdparty_api_key`: API key for authentication (optional)
     * - `thirdparty_assignment_id`: Their internal assignment ID
     * - `settings`: Grading configuration (model, rubric, RAG, etc.)
     *
     * The workflow then:
     * 1. Calls `{thirdparty_api_url}/api/v1/assignments/{thirdparty_assignment_id}/submissions`
     * 2. Gets array of submission objects (schema is flexible - stored as-is in JSONB)
     * 3. For each submission:
     * - Creates `GradingSession` with raw third-party data
     * - Starts LangGraph workflow in background
     * - AI analyzes and grades
     * - Results saved back to `GradingSession.results` (JSONB)
     *
     * **Third-party data structure (example):**
     * ```json
     * {
     * "submission_id": "ext_12345",
     * "student": {
     * "id": "student_789",
     * "name": "John Doe",
     * "email": "john@example.com"
     * },
     * "submission": {
     * "content": "Student's work...",
     * "files": ["https://..."],
     * "submitted_at": "2025-10-12T10:30:00Z"
     * }
     * }
     * ```
     *
     * **Optimization features:**
     * - ✅ Parallel grading (all submissions processed simultaneously)
     * - ✅ Checkpointing (can resume if server crashes)
     * - ✅ Progress tracking (poll status endpoint)
     * - ✅ Dynamic schema (no rigid database tables for third-party data)
     * - ✅ Thread-safe (LangGraph handles concurrency)
     *
     * **Example request:**
     * ```bash
     * POST /api/v1/grading/assignments/123e4567-e89b-12d3-a456-426614174000/start
     * ```
     *
     * **Response:**
     * ```json
     * {
     * "assignment_id": "123e4567-e89b-12d3-a456-426614174000",
     * "status": "started",
     * "session_count": 25,
     * "session_ids": ["uuid1", "uuid2", ...],
     * "message": "Grading started for 25 submissions"
     * }
     * ```
     * @param data The data for the request.
     * @param data.assignmentId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static startAutoGrading(data: StartAutoGradingData): CancelablePromise<StartAutoGradingResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/grading/assignments/{assignment_id}/start',
            path: {
                assignment_id: data.assignmentId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Grading Status
     * Check progress of a grading session
     *
     * **Returns current state:**
     * - Which step is running (fetch, analyze, grade, etc.)
     * - Progress percentage (0-100)
     * - Grade (if completed)
     * - Error (if failed)
     *
     * **Use this to show progress UI:**
     * ```javascript
     * // Poll every 2 seconds
     * const interval = setInterval(async () => {
     * const status = await fetch(`/api/v1/grading/sessions/${sessionId}/status`);
     * console.log(`Step: ${status.current_step}, Progress: ${status.progress}%`);
     *
     * if (status.status === 'graded') {
     * console.log(`Grade: ${status.grade}`);
     * clearInterval(interval);
     * }
     * }, 2000);
     * ```
     * @param data The data for the request.
     * @param data.sessionId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getGradingStatus(data: GetGradingStatusData): CancelablePromise<GetGradingStatusResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/grading/sessions/{session_id}/status',
            path: {
                session_id: data.sessionId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Review and Approve Grade
     * Teacher reviews and approves/adjusts AI-generated grade
     *
     * **When to use:**
     * - Assignment has `require_manual_review: true` in settings
     * - Grade is borderline (close to passing threshold)
     *
     * **How it works:**
     * 1. LangGraph workflow pauses at 'review' node
     * 2. Teacher calls this endpoint with decision
     * 3. Workflow resumes and saves final grade
     *
     * **Example:**
     * ```bash
     * POST /api/v1/grading/sessions/{id}/review
     * {
     * "approved": true
     * }
     * # OR adjust grade
     * {
     * "approved": false,
     * "adjusted_grade": 85.5
     * }
     * ```
     * @param data The data for the request.
     * @param data.sessionId
     * @param data.formData
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static reviewGrade(data: ReviewGradeData): CancelablePromise<ReviewGradeResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/grading/sessions/{session_id}/review',
            path: {
                session_id: data.sessionId
            },
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Assignment
     * Create a new assignment with grading configuration
     *
     * **Required fields:**
     * - `title`: Assignment name
     * - `thirdparty_api_url`: Base URL of external LMS API
     * - `thirdparty_assignment_id`: Their internal assignment ID
     *
     * **Optional grading settings:**
     * - `auto_grade`: Start grading immediately when triggered (default: true)
     * - `require_manual_review`: Teacher must approve all grades (default: false)
     * - `use_rag`: Use uploaded course materials as context (default: false)
     * - `grading_model`: AI model to use (default: "gpt-5-mini")
     * - `teacher_instructions`: Additional context for AI grader
     * - `rubric`: JSON object mapping criteria to points
     * - `max_points`: Maximum score (default: 100)
     *
     * **Example:**
     * ```bash
     * POST /api/v1/grading/assignments
     * {
     * "title": "Essay Assignment 1",
     * "thirdparty_api_url": "https://api.classroom.com",
     * "thirdparty_assignment_id": "assignment_123",
     * "thirdparty_api_key": "secret_key",
     * "rubric": {
     * "thesis_clarity": 20,
     * "evidence": 30,
     * "organization": 25,
     * "grammar": 25
     * },
     * "teacher_instructions": "Focus on argument quality over grammar"
     * }
     * ```
     * @param data The data for the request.
     * @param data.formData
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static createAssignment(data: CreateAssignmentData): CancelablePromise<CreateAssignmentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/grading/assignments',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Upload Course Material for RAG
     * Upload reference materials for RAG-enhanced grading
     *
     * **Use case:**
     * Teacher uploads course notes, rubrics, example essays, etc.
     * When RAG is enabled, AI uses these as context for grading.
     *
     * **Supported formats:**
     * - PDF
     * - DOCX
     * - TXT
     * - MD
     *
     * **How it works:**
     * 1. Extract text from file
     * 2. Generate vector embedding (for similarity search)
     * 3. Store in course_materials table
     * 4. When grading, retrieve relevant materials based on submission content
     *
     * **Note:** Requires pgvector extension for full functionality
     * @param data The data for the request.
     * @param data.assignmentId
     * @param data.formData
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static uploadCourseMaterial(data: UploadCourseMaterialData): CancelablePromise<UploadCourseMaterialResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/grading/assignments/{assignment_id}/materials',
            path: {
                assignment_id: data.assignmentId
            },
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class ThreadsService {
    /**
     * List User Threads
     * Get all threads for current user with pagination and project data.
     *
     * Returns threads with:
     * - Associated project information
     * - Message count per thread
     * - Pagination metadata
     * @param data The data for the request.
     * @param data.page Page number (1-based)
     * @param data.limit Items per page (max 1000)
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static listUserThreads(data: ListUserThreadsData = {}): CancelablePromise<ListUserThreadsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/threads',
            query: {
                page: data.page,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Thread
     * Create new thread.
     *
     * Optionally associate with a project.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ThreadPublic Successful Response
     * @throws ApiError
     */
    public static createThread(data: CreateThreadData): CancelablePromise<CreateThreadResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/threads',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Thread
     * Get a specific thread by ID with complete related data.
     *
     * Returns:
     * - Thread details
     * - Associated project data
     * - Message count
     * - Recent agent runs
     * @param data The data for the request.
     * @param data.threadId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getThread(data: GetThreadData): CancelablePromise<GetThreadResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/threads/{thread_id}',
            path: {
                thread_id: data.threadId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Thread Endpoint
     * Update thread.
     * @param data The data for the request.
     * @param data.threadId
     * @param data.requestBody
     * @returns ThreadPublic Successful Response
     * @throws ApiError
     */
    public static updateThreadEndpoint(data: ThreadsUpdateThreadEndpointData): CancelablePromise<ThreadsUpdateThreadEndpointResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/threads/{thread_id}',
            path: {
                thread_id: data.threadId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Thread Endpoint
     * Delete thread and all associated messages.
     * @param data The data for the request.
     * @param data.threadId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteThreadEndpoint(data: ThreadsDeleteThreadEndpointData): CancelablePromise<ThreadsDeleteThreadEndpointResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/threads/{thread_id}',
            path: {
                thread_id: data.threadId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Thread Messages
     * Get all messages for a thread.
     *
     * Fetches messages in batches to avoid large queries.
     * Returns up to 'limit' messages ordered by creation time.
     * @param data The data for the request.
     * @param data.threadId
     * @param data.order Order by created_at: 'asc' or 'desc'
     * @param data.limit Max messages to return
     * @returns ThreadMessagesPublic Successful Response
     * @throws ApiError
     */
    public static getThreadMessages(data: GetThreadMessagesData): CancelablePromise<GetThreadMessagesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/threads/{thread_id}/messages',
            path: {
                thread_id: data.threadId
            },
            query: {
                order: data.order,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Message
     * Create new message in a thread.
     * @param data The data for the request.
     * @param data.threadId
     * @param data.requestBody
     * @returns ThreadMessagePublic Successful Response
     * @throws ApiError
     */
    public static createThreadMessage(data: CreateThreadMessageData): CancelablePromise<CreateThreadMessageResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/threads/{thread_id}/messages',
            path: {
                thread_id: data.threadId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Message
     * Get specific message by ID.
     * @param data The data for the request.
     * @param data.threadId
     * @param data.messageId
     * @returns ThreadMessagePublic Successful Response
     * @throws ApiError
     */
    public static readMessage(data: ThreadsReadMessageData): CancelablePromise<ThreadsReadMessageResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/threads/{thread_id}/messages/{message_id}',
            path: {
                thread_id: data.threadId,
                message_id: data.messageId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Message Endpoint
     * Update message.
     * @param data The data for the request.
     * @param data.threadId
     * @param data.messageId
     * @param data.requestBody
     * @returns ThreadMessagePublic Successful Response
     * @throws ApiError
     */
    public static updateMessageEndpoint(data: ThreadsUpdateMessageEndpointData): CancelablePromise<ThreadsUpdateMessageEndpointResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/threads/{thread_id}/messages/{message_id}',
            path: {
                thread_id: data.threadId,
                message_id: data.messageId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Message Endpoint
     * Delete message from thread.
     * @param data The data for the request.
     * @param data.threadId
     * @param data.messageId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteMessageEndpoint(data: ThreadsDeleteMessageEndpointData): CancelablePromise<ThreadsDeleteMessageEndpointResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/threads/{thread_id}/messages/{message_id}',
            path: {
                thread_id: data.threadId,
                message_id: data.messageId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class UsersService {
    /**
     * Login Access Token
     * OAuth2 compatible token login.
     * @param data The data for the request.
     * @param data.formData
     * @returns LoginResponse Successful Response
     * @throws ApiError
     */
    public static loginAccessToken(data: UsersLoginAccessTokenData): CancelablePromise<UsersLoginAccessTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/login/access-token',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Login
     * Login with email and password.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns LoginResponse Successful Response
     * @throws ApiError
     */
    public static login(data: UsersLoginData): CancelablePromise<UsersLoginResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/login',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Register
     * Register new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns RegisterResponse Successful Response
     * @throws ApiError
     */
    public static register(data: UsersRegisterData): CancelablePromise<UsersRegisterResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/register',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Users
     * Get all users (superuser only).
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns UsersPublic Successful Response
     * @throws ApiError
     */
    public static readUsers(data: UsersReadUsersData = {}): CancelablePromise<UsersReadUsersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create User Endpoint
     * Create new user (superuser only).
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static createUserEndpoint(data: UsersCreateUserEndpointData): CancelablePromise<UsersCreateUserEndpointResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User By Id
     * Get user by ID. Own profile or superuser only.
     * @param data The data for the request.
     * @param data.userId
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserById(data: UsersReadUserByIdData): CancelablePromise<UsersReadUserByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update User Endpoint
     * Update user (superuser only).
     * @param data The data for the request.
     * @param data.userId
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUserEndpoint(data: UsersUpdateUserEndpointData): CancelablePromise<UsersUpdateUserEndpointResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete User Endpoint
     * Delete user (superuser only).
     * @param data The data for the request.
     * @param data.userId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUserEndpoint(data: UsersDeleteUserEndpointData): CancelablePromise<UsersDeleteUserEndpointResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User Me
     * Get current user profile.
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/me/profile'
        });
    }
    
    /**
     * Update User Me
     * Update current user profile.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUserMe(data: UsersUpdateUserMeData): CancelablePromise<UsersUpdateUserMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me/profile',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Password Me
     * Update current user password.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static updatePasswordMe(data: UsersUpdatePasswordMeData): CancelablePromise<UsersUpdatePasswordMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me/password',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete User Me
     * Delete current user account.
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/me'
        });
    }
}