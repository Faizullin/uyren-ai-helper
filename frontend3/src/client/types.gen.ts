// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseURL: 'http://localhost:8000' | (string & {});
};

/**
 * Body_users-login_access_token
 */
export type BodyUsersLoginAccessToken = {
    /**
     * Grant Type
     */
    grant_type?: string | null;
    /**
     * Username
     */
    username: string;
    /**
     * Password
     */
    password: string;
    /**
     * Scope
     */
    scope?: string;
    /**
     * Client Id
     */
    client_id?: string | null;
    /**
     * Client Secret
     */
    client_secret?: string | null;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * LoginRequest
 *
 * Login request schema.
 */
export type LoginRequest = {
    /**
     * Email
     */
    email: string;
    /**
     * Password
     */
    password: string;
};

/**
 * LoginResponse
 *
 * Login response schema.
 */
export type LoginResponse = {
    /**
     * Access Token
     */
    access_token: string;
    /**
     * Token Type
     */
    token_type?: string;
};

/**
 * Message
 *
 * Generic message response.
 */
export type Message = {
    /**
     * Message
     */
    message: string;
};

/**
 * RegisterRequest
 *
 * Register request schema.
 */
export type RegisterRequest = {
    /**
     * Email
     */
    email: string;
    /**
     * Password
     */
    password: string;
    /**
     * Full Name
     */
    full_name?: string | null;
};

/**
 * RegisterResponse
 *
 * Register response schema.
 */
export type RegisterResponse = {
    /**
     * Id
     */
    id: string;
    /**
     * Email
     */
    email: string;
    /**
     * Full Name
     */
    full_name?: string | null;
};

/**
 * UpdatePassword
 *
 * Password update schema.
 */
export type UpdatePassword = {
    /**
     * Current Password
     */
    current_password: string;
    /**
     * New Password
     */
    new_password: string;
};

/**
 * UserCreate
 *
 * User creation schema (admin).
 */
export type UserCreate = {
    /**
     * Email
     */
    email: string;
    /**
     * Password
     */
    password: string;
    /**
     * Full Name
     */
    full_name?: string | null;
    /**
     * Is Active
     */
    is_active?: boolean;
    /**
     * Is Superuser
     */
    is_superuser?: boolean;
};

/**
 * UserPublic
 *
 * Public user model.
 */
export type UserPublic = {
    /**
     * Email
     */
    email: string;
    /**
     * Is Active
     */
    is_active?: boolean;
    /**
     * Is Superuser
     */
    is_superuser?: boolean;
    /**
     * Full Name
     */
    full_name?: string | null;
    /**
     * Id
     */
    id: string;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
};

/**
 * UserUpdate
 *
 * User update schema (admin).
 */
export type UserUpdate = {
    /**
     * Email
     */
    email?: string | null;
    /**
     * Password
     */
    password?: string | null;
    /**
     * Full Name
     */
    full_name?: string | null;
    /**
     * Is Active
     */
    is_active?: boolean | null;
    /**
     * Is Superuser
     */
    is_superuser?: boolean | null;
};

/**
 * UserUpdateMe
 *
 * User self-update schema.
 */
export type UserUpdateMe = {
    /**
     * Full Name
     */
    full_name?: string | null;
    /**
     * Email
     */
    email?: string | null;
};

/**
 * UsersPublic
 *
 * Public users list model.
 */
export type UsersPublic = {
    /**
     * Data
     */
    data: Array<UserPublic>;
    /**
     * Count
     */
    count: number;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

export type UsersLoginAccessTokenData = {
    body: BodyUsersLoginAccessToken;
    path?: never;
    query?: never;
    url: '/api/v1/users/login/access-token';
};

export type UsersLoginAccessTokenErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersLoginAccessTokenError = UsersLoginAccessTokenErrors[keyof UsersLoginAccessTokenErrors];

export type UsersLoginAccessTokenResponses = {
    /**
     * Successful Response
     */
    200: LoginResponse;
};

export type UsersLoginAccessTokenResponse = UsersLoginAccessTokenResponses[keyof UsersLoginAccessTokenResponses];

export type UsersLoginData = {
    body: LoginRequest;
    path?: never;
    query?: never;
    url: '/api/v1/users/login';
};

export type UsersLoginErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersLoginError = UsersLoginErrors[keyof UsersLoginErrors];

export type UsersLoginResponses = {
    /**
     * Successful Response
     */
    200: LoginResponse;
};

export type UsersLoginResponse = UsersLoginResponses[keyof UsersLoginResponses];

export type UsersRegisterData = {
    body: RegisterRequest;
    path?: never;
    query?: never;
    url: '/api/v1/users/register';
};

export type UsersRegisterErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersRegisterError = UsersRegisterErrors[keyof UsersRegisterErrors];

export type UsersRegisterResponses = {
    /**
     * Successful Response
     */
    200: RegisterResponse;
};

export type UsersRegisterResponse = UsersRegisterResponses[keyof UsersRegisterResponses];

export type UsersReadUsersData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
    };
    url: '/api/v1/users';
};

export type UsersReadUsersErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersReadUsersError = UsersReadUsersErrors[keyof UsersReadUsersErrors];

export type UsersReadUsersResponses = {
    /**
     * Successful Response
     */
    200: UsersPublic;
};

export type UsersReadUsersResponse = UsersReadUsersResponses[keyof UsersReadUsersResponses];

export type UsersCreateUserEndpointData = {
    body: UserCreate;
    path?: never;
    query?: never;
    url: '/api/v1/users';
};

export type UsersCreateUserEndpointErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersCreateUserEndpointError = UsersCreateUserEndpointErrors[keyof UsersCreateUserEndpointErrors];

export type UsersCreateUserEndpointResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type UsersCreateUserEndpointResponse = UsersCreateUserEndpointResponses[keyof UsersCreateUserEndpointResponses];

export type UsersDeleteUserEndpointData = {
    body?: never;
    path: {
        /**
         * User Id
         */
        user_id: string;
    };
    query?: never;
    url: '/api/v1/users/{user_id}';
};

export type UsersDeleteUserEndpointErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersDeleteUserEndpointError = UsersDeleteUserEndpointErrors[keyof UsersDeleteUserEndpointErrors];

export type UsersDeleteUserEndpointResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type UsersDeleteUserEndpointResponse = UsersDeleteUserEndpointResponses[keyof UsersDeleteUserEndpointResponses];

export type UsersReadUserByIdData = {
    body?: never;
    path: {
        /**
         * User Id
         */
        user_id: string;
    };
    query?: never;
    url: '/api/v1/users/{user_id}';
};

export type UsersReadUserByIdErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersReadUserByIdError = UsersReadUserByIdErrors[keyof UsersReadUserByIdErrors];

export type UsersReadUserByIdResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type UsersReadUserByIdResponse = UsersReadUserByIdResponses[keyof UsersReadUserByIdResponses];

export type UsersUpdateUserEndpointData = {
    body: UserUpdate;
    path: {
        /**
         * User Id
         */
        user_id: string;
    };
    query?: never;
    url: '/api/v1/users/{user_id}';
};

export type UsersUpdateUserEndpointErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersUpdateUserEndpointError = UsersUpdateUserEndpointErrors[keyof UsersUpdateUserEndpointErrors];

export type UsersUpdateUserEndpointResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type UsersUpdateUserEndpointResponse = UsersUpdateUserEndpointResponses[keyof UsersUpdateUserEndpointResponses];

export type UsersReadUserMeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/users/me/profile';
};

export type UsersReadUserMeResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type UsersReadUserMeResponse = UsersReadUserMeResponses[keyof UsersReadUserMeResponses];

export type UsersUpdateUserMeData = {
    body: UserUpdateMe;
    path?: never;
    query?: never;
    url: '/api/v1/users/me/profile';
};

export type UsersUpdateUserMeErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersUpdateUserMeError = UsersUpdateUserMeErrors[keyof UsersUpdateUserMeErrors];

export type UsersUpdateUserMeResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type UsersUpdateUserMeResponse = UsersUpdateUserMeResponses[keyof UsersUpdateUserMeResponses];

export type UsersUpdatePasswordMeData = {
    body: UpdatePassword;
    path?: never;
    query?: never;
    url: '/api/v1/users/me/password';
};

export type UsersUpdatePasswordMeErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersUpdatePasswordMeError = UsersUpdatePasswordMeErrors[keyof UsersUpdatePasswordMeErrors];

export type UsersUpdatePasswordMeResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type UsersUpdatePasswordMeResponse = UsersUpdatePasswordMeResponses[keyof UsersUpdatePasswordMeResponses];

export type UsersDeleteUserMeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/users/me';
};

export type UsersDeleteUserMeResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type UsersDeleteUserMeResponse = UsersDeleteUserMeResponses[keyof UsersDeleteUserMeResponses];
