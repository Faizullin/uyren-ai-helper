// This file is auto-generated by @hey-api/openapi-ts

/**
 * Agent creation schema.
 */
export type AgentCreate = {
    name: string;
    description?: (string | null);
    system_prompt?: (string | null);
    model?: (string | null);
    is_default?: boolean;
    tags?: (Array<string> | null);
    icon_name?: (string | null);
    icon_color?: (string | null);
    icon_background?: (string | null);
};

/**
 * Agent start request schema.
 */
export type AgentStartRequest = {
    agent_id?: (string | null);
    model_name?: (string | null);
};

/**
 * Agent start response schema.
 */
export type AgentStartResponse = {
    agent_run_id: string;
    status?: string;
};

/**
 * Agent update schema.
 */
export type AgentUpdate = {
    name?: (string | null);
    description?: (string | null);
    system_prompt?: (string | null);
    model?: (string | null);
    is_default?: (boolean | null);
    is_public?: (boolean | null);
    tags?: (Array<string> | null);
    icon_name?: (string | null);
    icon_color?: (string | null);
    icon_background?: (string | null);
};

export type Body_create_assignment = {
    title: string;
    description?: (string | null);
    thirdparty_api_url: string;
    thirdparty_assignment_id: string;
    thirdparty_api_key?: (string | null);
    auto_grade?: boolean;
    require_manual_review?: boolean;
    use_rag?: boolean;
    grading_model?: string;
    teacher_instructions?: string;
    rubric?: ({
    [key: string]: unknown;
} | null);
    max_points?: number;
};

export type Body_initiate_agent_session = {
    prompt: string;
    model_name?: (string | null);
    agent_id?: (string | null);
    files?: Array<Blob | File>;
};

export type Body_review_grade = {
    approved: boolean;
    adjusted_grade?: (number | null);
};

export type Body_upload_course_material = {
    title: string;
    file: Blob | File;
};

export type Body_users_login_access_token = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

/**
 * Agent initiation response schema.
 */
export type InitiateAgentResponse = {
    thread_id: string;
    agent_run_id: string;
    message?: string;
};

/**
 * Login request schema.
 */
export type LoginRequest = {
    email: string;
    password: string;
};

/**
 * Login response schema.
 */
export type LoginResponse = {
    access_token: string;
    token_type?: string;
};

/**
 * Generic message response.
 */
export type Message = {
    message: string;
};

/**
 * Register request schema.
 */
export type RegisterRequest = {
    email: string;
    password: string;
    full_name?: (string | null);
};

/**
 * Register response schema.
 */
export type RegisterResponse = {
    id: string;
    email: string;
    full_name?: (string | null);
};

/**
 * Thread creation schema.
 */
export type ThreadCreate = {
    title: string;
    description?: (string | null);
};

/**
 * Thread message creation schema.
 */
export type ThreadMessageCreate = {
    content: string;
    role?: string;
};

/**
 * Public thread message model.
 */
export type ThreadMessagePublic = {
    content: string;
    role?: string;
    id: string;
    thread_id: string;
    created_at: string;
    updated_at: string;
};

/**
 * Public thread messages list model.
 */
export type ThreadMessagesPublic = {
    data: Array<ThreadMessagePublic>;
    count: number;
};

/**
 * Thread message update schema.
 */
export type ThreadMessageUpdate = {
    content?: (string | null);
    role?: (string | null);
};

/**
 * Public thread model.
 */
export type ThreadPublic = {
    title: string;
    description?: (string | null);
    id: string;
    owner_id: string;
    project_id: (string | null);
    created_at: string;
    updated_at: string;
};

/**
 * Thread update schema.
 */
export type ThreadUpdate = {
    title?: (string | null);
    description?: (string | null);
};

/**
 * Password update schema.
 */
export type UpdatePassword = {
    current_password: string;
    new_password: string;
};

/**
 * User creation schema (admin).
 */
export type UserCreate = {
    email: string;
    password: string;
    full_name?: (string | null);
    is_active?: boolean;
    is_superuser?: boolean;
};

/**
 * Public user model.
 */
export type UserPublic = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    id: string;
    created_at: string;
    updated_at: string;
};

/**
 * Public users list model.
 */
export type UsersPublic = {
    data: Array<UserPublic>;
    count: number;
};

/**
 * User update schema (admin).
 */
export type UserUpdate = {
    email?: (string | null);
    password?: (string | null);
    full_name?: (string | null);
    is_active?: (boolean | null);
    is_superuser?: (boolean | null);
};

/**
 * User self-update schema.
 */
export type UserUpdateMe = {
    full_name?: (string | null);
    email?: (string | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type StartAgentRunData = {
    requestBody: AgentStartRequest;
    threadId: string;
};

export type StartAgentRunResponse = (AgentStartResponse);

export type InitiateAgentSessionData = {
    formData: Body_initiate_agent_session;
};

export type InitiateAgentSessionResponse = (InitiateAgentResponse);

export type ListActiveAgentRunsResponse = ({
    [key: string]: Array<unknown>;
});

export type ListThreadAgentRunsData = {
    threadId: string;
};

export type ListThreadAgentRunsResponse = ({
    [key: string]: Array<unknown>;
});

export type GetAgentRunStatusData = {
    agentRunId: string;
};

export type GetAgentRunStatusResponse = ({
    [key: string]: unknown;
});

export type StopAgentRunData = {
    agentRunId: string;
};

export type StopAgentRunResponse = ({
    [key: string]: string;
});

export type RetryAgentRunData = {
    agentRunId: string;
};

export type RetryAgentRunResponse = ({
    [key: string]: unknown;
});

export type AgentsGetAgentsData = {
    isDefault?: (boolean | null);
    isPublic?: (boolean | null);
    limit?: number;
    search?: (string | null);
    skip?: number;
};

export type AgentsGetAgentsResponse = ({
    [key: string]: unknown;
});

export type AgentsCreateAgentData = {
    requestBody: AgentCreate;
};

export type AgentsCreateAgentResponse = ({
    [key: string]: unknown;
});

export type AgentsGetAgentData = {
    agentId: string;
};

export type AgentsGetAgentResponse = ({
    [key: string]: unknown;
});

export type AgentsUpdateAgentData = {
    agentId: string;
    requestBody: AgentUpdate;
};

export type AgentsUpdateAgentResponse = ({
    [key: string]: unknown;
});

export type AgentsDeleteAgentData = {
    agentId: string;
};

export type AgentsDeleteAgentResponse = (Message);

export type UsersLoginAccessTokenData = {
    formData: Body_users_login_access_token;
};

export type UsersLoginAccessTokenResponse = (LoginResponse);

export type UsersLoginData = {
    requestBody: LoginRequest;
};

export type UsersLoginResponse = (LoginResponse);

export type UsersRegisterData = {
    requestBody: RegisterRequest;
};

export type UsersRegisterResponse = (RegisterResponse);

export type StartAutoGradingData = {
    assignmentId: string;
};

export type StartAutoGradingResponse = (unknown);

export type GetGradingStatusData = {
    sessionId: string;
};

export type GetGradingStatusResponse = (unknown);

export type ReviewGradeData = {
    formData: Body_review_grade;
    sessionId: string;
};

export type ReviewGradeResponse = (unknown);

export type CreateAssignmentData = {
    formData: Body_create_assignment;
};

export type CreateAssignmentResponse = (unknown);

export type UploadCourseMaterialData = {
    assignmentId: string;
    formData: Body_upload_course_material;
};

export type UploadCourseMaterialResponse = (unknown);

export type ListUserThreadsData = {
    /**
     * Items per page (max 1000)
     */
    limit?: number;
    /**
     * Page number (1-based)
     */
    page?: number;
};

export type ListUserThreadsResponse = ({
    [key: string]: unknown;
});

export type CreateThreadData = {
    requestBody: ThreadCreate;
};

export type CreateThreadResponse = (ThreadPublic);

export type GetThreadData = {
    threadId: string;
};

export type GetThreadResponse = ({
    [key: string]: unknown;
});

export type ThreadsUpdateThreadEndpointData = {
    requestBody: ThreadUpdate;
    threadId: string;
};

export type ThreadsUpdateThreadEndpointResponse = (ThreadPublic);

export type ThreadsDeleteThreadEndpointData = {
    threadId: string;
};

export type ThreadsDeleteThreadEndpointResponse = (Message);

export type GetThreadMessagesData = {
    /**
     * Max messages to return
     */
    limit?: number;
    /**
     * Order by created_at: 'asc' or 'desc'
     */
    order?: string;
    threadId: string;
};

export type GetThreadMessagesResponse = (ThreadMessagesPublic);

export type CreateThreadMessageData = {
    requestBody: ThreadMessageCreate;
    threadId: string;
};

export type CreateThreadMessageResponse = (ThreadMessagePublic);

export type ThreadsReadMessageData = {
    messageId: string;
    threadId: string;
};

export type ThreadsReadMessageResponse = (ThreadMessagePublic);

export type ThreadsUpdateMessageEndpointData = {
    messageId: string;
    requestBody: ThreadMessageUpdate;
    threadId: string;
};

export type ThreadsUpdateMessageEndpointResponse = (ThreadMessagePublic);

export type ThreadsDeleteMessageEndpointData = {
    messageId: string;
    threadId: string;
};

export type ThreadsDeleteMessageEndpointResponse = (Message);

export type UsersReadUsersData = {
    limit?: number;
    skip?: number;
};

export type UsersReadUsersResponse = (UsersPublic);

export type UsersCreateUserEndpointData = {
    requestBody: UserCreate;
};

export type UsersCreateUserEndpointResponse = (UserPublic);

export type UsersReadUserByIdData = {
    userId: string;
};

export type UsersReadUserByIdResponse = (UserPublic);

export type UsersUpdateUserEndpointData = {
    requestBody: UserUpdate;
    userId: string;
};

export type UsersUpdateUserEndpointResponse = (UserPublic);

export type UsersDeleteUserEndpointData = {
    userId: string;
};

export type UsersDeleteUserEndpointResponse = (Message);

export type UsersReadUserMeResponse = (UserPublic);

export type UsersUpdateUserMeData = {
    requestBody: UserUpdateMe;
};

export type UsersUpdateUserMeResponse = (UserPublic);

export type UsersUpdatePasswordMeData = {
    requestBody: UpdatePassword;
};

export type UsersUpdatePasswordMeResponse = (Message);

export type UsersDeleteUserMeResponse = (Message);