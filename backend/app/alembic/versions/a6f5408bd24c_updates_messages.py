"""updates messages

Revision ID: a6f5408bd24c
Revises: 
Create Date: 2025-10-27 00:59:27.309667

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes
import pgvector


# revision identifiers, used by Alembic.
revision = 'a6f5408bd24c'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user',
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('full_name', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('hashed_password', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=True)
    op.create_table('agent_templates',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('owner_id', sa.Uuid(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('system_prompt', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('mcp_requirements', sa.JSON(), nullable=True),
    sa.Column('agentpress_tools', sa.JSON(), nullable=True),
    sa.Column('tags', sa.JSON(), nullable=True),
    sa.Column('categories', sa.JSON(), nullable=True),
    sa.Column('is_public', sa.Boolean(), nullable=False),
    sa.Column('marketplace_published_at', sa.DateTime(), nullable=True),
    sa.Column('download_count', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('icon_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('icon_color', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('icon_background', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('my_metadata', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('agents',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('owner_id', sa.Uuid(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('system_prompt', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('configured_mcps', sa.JSON(), nullable=True),
    sa.Column('custom_mcps', sa.JSON(), nullable=True),
    sa.Column('agentpress_tools', sa.JSON(), nullable=True),
    sa.Column('is_default', sa.Boolean(), nullable=False),
    sa.Column('is_public', sa.Boolean(), nullable=False),
    sa.Column('tags', sa.JSON(), nullable=True),
    sa.Column('icon_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('icon_color', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('icon_background', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('current_version_id', sa.Uuid(), nullable=True),
    sa.Column('version_count', sa.Integer(), nullable=False),
    sa.Column('my_metadata', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('credit_accounts',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('balance', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('lifetime_granted', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('lifetime_used', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_index('ix_credit_accounts_user_id', 'credit_accounts', ['user_id'], unique=False)
    op.create_table('credit_transactions',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('amount', sa.Numeric(precision=10, scale=6), nullable=False),
    sa.Column('balance_after', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('transaction_type', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('reference_id', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('my_metadata', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_credit_transactions_created_at', 'credit_transactions', ['created_at'], unique=False)
    op.create_index('ix_credit_transactions_type', 'credit_transactions', ['transaction_type'], unique=False)
    op.create_index('ix_credit_transactions_user_id', 'credit_transactions', ['user_id'], unique=False)
    op.create_table('knowledge_base_folders',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('owner_id', sa.Uuid(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_kb_folders_owner_name', 'knowledge_base_folders', ['owner_id', 'name'], unique=False)
    op.create_table('projects',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('owner_id', sa.Uuid(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True),
    sa.Column('is_public', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('agent_versions',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('agent_id', sa.Uuid(), nullable=False),
    sa.Column('version_number', sa.Integer(), nullable=False),
    sa.Column('version_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('system_prompt', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('model', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('configured_mcps', sa.JSON(), nullable=True),
    sa.Column('custom_mcps', sa.JSON(), nullable=True),
    sa.Column('agentpress_tools', sa.JSON(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('config', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('created_by', sa.Uuid(), nullable=True),
    sa.Column('change_description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('previous_version_id', sa.Uuid(), nullable=True),
    sa.ForeignKeyConstraint(['agent_id'], ['agents.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('api_keys',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('public_key', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('secret_key_hash', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('owner_id', sa.Uuid(), nullable=False),
    sa.Column('project_id', sa.Uuid(), nullable=True),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.Column('last_used_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_api_keys_owner_id'), 'api_keys', ['owner_id'], unique=False)
    op.create_index(op.f('ix_api_keys_project_id'), 'api_keys', ['project_id'], unique=False)
    op.create_index(op.f('ix_api_keys_public_key'), 'api_keys', ['public_key'], unique=True)
    op.create_table('knowledge_base_entries',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('folder_id', sa.Uuid(), nullable=False),
    sa.Column('owner_id', sa.Uuid(), nullable=False),
    sa.Column('filename', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('file_path', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('file_size', sa.Integer(), nullable=False),
    sa.Column('mime_type', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('summary', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['folder_id'], ['knowledge_base_folders.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_kb_entries_folder_active', 'knowledge_base_entries', ['folder_id', 'is_active'], unique=False)
    op.create_index('ix_kb_entries_owner_active', 'knowledge_base_entries', ['owner_id', 'is_active'], unique=False)
    op.create_table('lms_resources',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('owner_id', sa.Uuid(), nullable=False),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('content', sa.Text(), nullable=True),
    sa.Column('thumbnail_url', sqlmodel.sql.sqltypes.AutoString(length=2000), nullable=True),
    sa.Column('target_type', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('target_id', sa.Uuid(), nullable=True),
    sa.Column('knowledge_base_folder_id', sa.Uuid(), nullable=True),
    sa.Column('my_metadata', sa.JSON(), nullable=True),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('is_public', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('published_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['knowledge_base_folder_id'], ['knowledge_base_folders.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_lms_resources_created_at'), 'lms_resources', ['created_at'], unique=False)
    op.create_index(op.f('ix_lms_resources_knowledge_base_folder_id'), 'lms_resources', ['knowledge_base_folder_id'], unique=False)
    op.create_index(op.f('ix_lms_resources_owner_id'), 'lms_resources', ['owner_id'], unique=False)
    op.create_index(op.f('ix_lms_resources_target_id'), 'lms_resources', ['target_id'], unique=False)
    op.create_index(op.f('ix_lms_resources_target_type'), 'lms_resources', ['target_type'], unique=False)
    op.create_index(op.f('ix_lms_resources_title'), 'lms_resources', ['title'], unique=False)
    op.create_table('thread',
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True),
    sa.Column('target_type', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('owner_id', sa.Uuid(), nullable=False),
    sa.Column('project_id', sa.Uuid(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('vector_stores',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('owner_id', sa.Uuid(), nullable=False),
    sa.Column('project_id', sa.Uuid(), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('provider', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('config', sa.Text(), nullable=True),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=False),
    sa.Column('is_public', sa.Boolean(), nullable=False),
    sa.Column('document_count', sa.Integer(), nullable=False),
    sa.Column('chunk_count', sa.Integer(), nullable=False),
    sa.Column('total_tokens', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_vector_stores_is_public'), 'vector_stores', ['is_public'], unique=False)
    op.create_index(op.f('ix_vector_stores_name'), 'vector_stores', ['name'], unique=False)
    op.create_index(op.f('ix_vector_stores_owner_id'), 'vector_stores', ['owner_id'], unique=False)
    op.create_index(op.f('ix_vector_stores_project_id'), 'vector_stores', ['project_id'], unique=False)
    op.create_index(op.f('ix_vector_stores_provider'), 'vector_stores', ['provider'], unique=False)
    op.create_table('agent_knowledge_assignments',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('agent_id', sa.Uuid(), nullable=False),
    sa.Column('entry_id', sa.Uuid(), nullable=False),
    sa.Column('owner_id', sa.Uuid(), nullable=False),
    sa.Column('enabled', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['agent_id'], ['agents.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['entry_id'], ['knowledge_base_entries.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_kb_assignments_agent_enabled', 'agent_knowledge_assignments', ['agent_id', 'enabled'], unique=False)
    op.create_index('ix_kb_assignments_agent_entry', 'agent_knowledge_assignments', ['agent_id', 'entry_id'], unique=True)
    op.create_table('agent_runs',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('thread_id', sa.Uuid(), nullable=False),
    sa.Column('agent_id', sa.Uuid(), nullable=True),
    sa.Column('agent_version_id', sa.Uuid(), nullable=True),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('started_at', sa.DateTime(), nullable=False),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('error_message', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('input_tokens', sa.Integer(), nullable=True),
    sa.Column('output_tokens', sa.Integer(), nullable=True),
    sa.Column('total_cost', sa.Float(), nullable=True),
    sa.Column('model_used', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('my_metadata', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['agent_id'], ['agents.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['agent_version_id'], ['agent_versions.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['thread_id'], ['thread.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('thread_message',
    sa.Column('content', sqlmodel.sql.sqltypes.AutoString(length=10000), nullable=False),
    sa.Column('role', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('thread_id', sa.Uuid(), nullable=False),
    sa.Column('data', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['thread_id'], ['thread.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('page',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('owner_id', sa.Uuid(), nullable=False),
    sa.Column('vector_store_id', sa.Uuid(), nullable=False),
    sa.Column('parent_page_id', sa.Uuid(), nullable=True),
    sa.Column('path', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=False),
    sa.Column('checksum', sqlmodel.sql.sqltypes.AutoString(length=64), nullable=True),
    sa.Column('meta', sa.Text(), nullable=True),
    sa.Column('target_type', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('target_id', sa.Uuid(), nullable=True),
    sa.Column('source', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('version', sa.Uuid(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('last_refresh', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['parent_page_id'], ['vector_store.page.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['vector_store_id'], ['vector_stores.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='vector_store'
    )
    op.create_index(op.f('ix_vector_store_page_owner_id'), 'page', ['owner_id'], unique=False, schema='vector_store')
    op.create_index(op.f('ix_vector_store_page_parent_page_id'), 'page', ['parent_page_id'], unique=False, schema='vector_store')
    op.create_index(op.f('ix_vector_store_page_path'), 'page', ['path'], unique=True, schema='vector_store')
    op.create_index(op.f('ix_vector_store_page_target_id'), 'page', ['target_id'], unique=False, schema='vector_store')
    op.create_index(op.f('ix_vector_store_page_target_type'), 'page', ['target_type'], unique=False, schema='vector_store')
    op.create_index(op.f('ix_vector_store_page_vector_store_id'), 'page', ['vector_store_id'], unique=False, schema='vector_store')
    op.create_table('page_section',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('page_id', sa.Uuid(), nullable=False),
    sa.Column('content', sa.Text(), nullable=True),
    sa.Column('token_count', sa.Integer(), nullable=False),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('heading', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['page_id'], ['vector_store.page.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='vector_store'
    )
    op.create_index(op.f('ix_vector_store_page_section_page_id'), 'page_section', ['page_id'], unique=False, schema='vector_store')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_vector_store_page_section_page_id'), table_name='page_section', schema='vector_store')
    op.drop_table('page_section', schema='vector_store')
    op.drop_index(op.f('ix_vector_store_page_vector_store_id'), table_name='page', schema='vector_store')
    op.drop_index(op.f('ix_vector_store_page_target_type'), table_name='page', schema='vector_store')
    op.drop_index(op.f('ix_vector_store_page_target_id'), table_name='page', schema='vector_store')
    op.drop_index(op.f('ix_vector_store_page_path'), table_name='page', schema='vector_store')
    op.drop_index(op.f('ix_vector_store_page_parent_page_id'), table_name='page', schema='vector_store')
    op.drop_index(op.f('ix_vector_store_page_owner_id'), table_name='page', schema='vector_store')
    op.drop_table('page', schema='vector_store')
    op.drop_table('thread_message')
    op.drop_table('agent_runs')
    op.drop_index('ix_kb_assignments_agent_entry', table_name='agent_knowledge_assignments')
    op.drop_index('ix_kb_assignments_agent_enabled', table_name='agent_knowledge_assignments')
    op.drop_table('agent_knowledge_assignments')
    op.drop_index(op.f('ix_vector_stores_provider'), table_name='vector_stores')
    op.drop_index(op.f('ix_vector_stores_project_id'), table_name='vector_stores')
    op.drop_index(op.f('ix_vector_stores_owner_id'), table_name='vector_stores')
    op.drop_index(op.f('ix_vector_stores_name'), table_name='vector_stores')
    op.drop_index(op.f('ix_vector_stores_is_public'), table_name='vector_stores')
    op.drop_table('vector_stores')
    op.drop_table('thread')
    op.drop_index(op.f('ix_lms_resources_title'), table_name='lms_resources')
    op.drop_index(op.f('ix_lms_resources_target_type'), table_name='lms_resources')
    op.drop_index(op.f('ix_lms_resources_target_id'), table_name='lms_resources')
    op.drop_index(op.f('ix_lms_resources_owner_id'), table_name='lms_resources')
    op.drop_index(op.f('ix_lms_resources_knowledge_base_folder_id'), table_name='lms_resources')
    op.drop_index(op.f('ix_lms_resources_created_at'), table_name='lms_resources')
    op.drop_table('lms_resources')
    op.drop_index('ix_kb_entries_owner_active', table_name='knowledge_base_entries')
    op.drop_index('ix_kb_entries_folder_active', table_name='knowledge_base_entries')
    op.drop_table('knowledge_base_entries')
    op.drop_index(op.f('ix_api_keys_public_key'), table_name='api_keys')
    op.drop_index(op.f('ix_api_keys_project_id'), table_name='api_keys')
    op.drop_index(op.f('ix_api_keys_owner_id'), table_name='api_keys')
    op.drop_table('api_keys')
    op.drop_table('agent_versions')
    op.drop_table('projects')
    op.drop_index('ix_kb_folders_owner_name', table_name='knowledge_base_folders')
    op.drop_table('knowledge_base_folders')
    op.drop_index('ix_credit_transactions_user_id', table_name='credit_transactions')
    op.drop_index('ix_credit_transactions_type', table_name='credit_transactions')
    op.drop_index('ix_credit_transactions_created_at', table_name='credit_transactions')
    op.drop_table('credit_transactions')
    op.drop_index('ix_credit_accounts_user_id', table_name='credit_accounts')
    op.drop_table('credit_accounts')
    op.drop_table('agents')
    op.drop_table('agent_templates')
    op.drop_index(op.f('ix_user_email'), table_name='user')
    op.drop_table('user')
    # ### end Alembic commands ###
